// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module NonBlockingDCache(
  input         clock,
                reset,
                auto_out_a_ready,
                auto_out_b_valid,
  input  [1:0]  auto_out_b_bits_param,
  input  [3:0]  auto_out_b_bits_size,
  input  [2:0]  auto_out_b_bits_source,
  input  [31:0] auto_out_b_bits_address,
  input         auto_out_c_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [2:0]  auto_out_d_bits_source,
                auto_out_d_bits_sink,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_e_ready,
                io_cpu_req_valid,
  input  [39:0] io_cpu_req_bits_addr,
  input  [6:0]  io_cpu_req_bits_tag,
  input  [4:0]  io_cpu_req_bits_cmd,
  input  [1:0]  io_cpu_req_bits_size,
  input         io_cpu_req_bits_signed,
  input  [1:0]  io_cpu_req_bits_dprv,
  input         io_cpu_req_bits_phys,
                io_cpu_s1_kill,
  input  [63:0] io_cpu_s1_data_data,
  input  [7:0]  io_cpu_s1_data_mask,
  input         io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
                io_ptw_status_mxr,
                io_ptw_status_sum,
                io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [2:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
                auto_out_b_ready,
                auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
                auto_out_c_bits_param,
  output [3:0]  auto_out_c_bits_size,
  output [2:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output [63:0] auto_out_c_bits_data,
  output        auto_out_d_ready,
                auto_out_e_valid,
  output [2:0]  auto_out_e_bits_sink,
  output        io_cpu_req_ready,
                io_cpu_s2_nack,
                io_cpu_resp_valid,
  output [39:0] io_cpu_resp_bits_addr,
  output [6:0]  io_cpu_resp_bits_tag,
  output [4:0]  io_cpu_resp_bits_cmd,
  output [1:0]  io_cpu_resp_bits_size,
  output        io_cpu_resp_bits_signed,
  output [1:0]  io_cpu_resp_bits_dprv,
  output        io_cpu_resp_bits_dv,
  output [63:0] io_cpu_resp_bits_data,
  output [7:0]  io_cpu_resp_bits_mask,
  output        io_cpu_resp_bits_replay,
                io_cpu_resp_bits_has_data,
  output [63:0] io_cpu_resp_bits_data_word_bypass,
                io_cpu_resp_bits_data_raw,
                io_cpu_resp_bits_store_data,
  output        io_cpu_replay_next,
                io_cpu_s2_xcpt_ma_ld,
                io_cpu_s2_xcpt_ma_st,
                io_cpu_s2_xcpt_pf_ld,
                io_cpu_s2_xcpt_pf_st,
                io_cpu_s2_xcpt_gf_ld,
                io_cpu_s2_xcpt_gf_st,
                io_cpu_s2_xcpt_ae_ld,
                io_cpu_s2_xcpt_ae_st,
                io_cpu_ordered,
                io_cpu_perf_acquire,
                io_cpu_perf_release,
                io_cpu_perf_tlbMiss,
                io_ptw_req_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire             _io_cpu_s2_xcpt_ma_st_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_ma_ld_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_ae_st_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_ae_ld_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_gf_st_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_gf_ld_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_pf_st_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_xcpt_pf_ld_output;	// @[NBDcache.scala:1041:24]
  wire             _io_cpu_s2_nack_output;	// @[NBDcache.scala:1032:30]
  wire             s2_valid_masked;	// @[NBDcache.scala:995:31]
  wire             _GEN;	// @[NBDcache.scala:903:22, :991:{22,43}]
  wire             tl_out_d_ready;	// @[NBDcache.scala:935:45]
  reg  [3:0]       s2_tag_match_way;	// @[Reg.scala:19:16]
  wire             _wbArb_io_in_0_ready;	// @[NBDcache.scala:950:21]
  wire             _wbArb_io_in_1_ready;	// @[NBDcache.scala:950:21]
  wire             _wbArb_io_out_valid;	// @[NBDcache.scala:950:21]
  wire [21:0]      _wbArb_io_out_bits_tag;	// @[NBDcache.scala:950:21]
  wire [3:0]       _wbArb_io_out_bits_idx;	// @[NBDcache.scala:950:21]
  wire [2:0]       _wbArb_io_out_bits_source;	// @[NBDcache.scala:950:21]
  wire [2:0]       _wbArb_io_out_bits_param;	// @[NBDcache.scala:950:21]
  wire [3:0]       _wbArb_io_out_bits_way_en;	// @[NBDcache.scala:950:21]
  wire             _wbArb_io_out_bits_voluntary;	// @[NBDcache.scala:950:21]
  wire             _lfsr_prng_io_out_0;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_1;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_2;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_3;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_4;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_5;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_6;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_7;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_8;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_9;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_10;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_11;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_12;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_13;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_14;	// @[PRNG.scala:91:22]
  wire             _lfsr_prng_io_out_15;	// @[PRNG.scala:91:22]
  wire [63:0]      _amoalu_io_out;	// @[NBDcache.scala:883:22]
  wire             _writeArb_io_in_1_ready;	// @[NBDcache.scala:802:24]
  wire             _writeArb_io_out_valid;	// @[NBDcache.scala:802:24]
  wire [3:0]       _writeArb_io_out_bits_way_en;	// @[NBDcache.scala:802:24]
  wire [9:0]       _writeArb_io_out_bits_addr;	// @[NBDcache.scala:802:24]
  wire [63:0]      _writeArb_io_out_bits_data;	// @[NBDcache.scala:802:24]
  wire             _readArb_io_in_1_ready;	// @[NBDcache.scala:801:23]
  wire             _readArb_io_in_2_ready;	// @[NBDcache.scala:801:23]
  wire             _readArb_io_in_3_ready;	// @[NBDcache.scala:801:23]
  wire             _readArb_io_out_valid;	// @[NBDcache.scala:801:23]
  wire [3:0]       _readArb_io_out_bits_way_en;	// @[NBDcache.scala:801:23]
  wire [9:0]       _readArb_io_out_bits_addr;	// @[NBDcache.scala:801:23]
  wire [63:0]      _data_io_resp_0;	// @[NBDcache.scala:800:20]
  wire [63:0]      _data_io_resp_1;	// @[NBDcache.scala:800:20]
  wire [63:0]      _data_io_resp_2;	// @[NBDcache.scala:800:20]
  wire [63:0]      _data_io_resp_3;	// @[NBDcache.scala:800:20]
  wire             _metaWriteArb_io_in_0_ready;	// @[NBDcache.scala:795:28]
  wire             _metaWriteArb_io_in_1_ready;	// @[NBDcache.scala:795:28]
  wire             _metaWriteArb_io_out_valid;	// @[NBDcache.scala:795:28]
  wire [3:0]       _metaWriteArb_io_out_bits_idx;	// @[NBDcache.scala:795:28]
  wire [3:0]       _metaWriteArb_io_out_bits_way_en;	// @[NBDcache.scala:795:28]
  wire [1:0]       _metaWriteArb_io_out_bits_data_coh_state;	// @[NBDcache.scala:795:28]
  wire [21:0]      _metaWriteArb_io_out_bits_data_tag;	// @[NBDcache.scala:795:28]
  wire             _metaReadArb_io_in_1_ready;	// @[NBDcache.scala:794:27]
  wire             _metaReadArb_io_in_2_ready;	// @[NBDcache.scala:794:27]
  wire             _metaReadArb_io_in_3_ready;	// @[NBDcache.scala:794:27]
  wire             _metaReadArb_io_in_4_ready;	// @[NBDcache.scala:794:27]
  wire             _metaReadArb_io_out_valid;	// @[NBDcache.scala:794:27]
  wire [3:0]       _metaReadArb_io_out_bits_idx;	// @[NBDcache.scala:794:27]
  wire             _meta_io_read_ready;	// @[NBDcache.scala:793:20]
  wire             _meta_io_write_ready;	// @[NBDcache.scala:793:20]
  wire [1:0]       _meta_io_resp_0_coh_state;	// @[NBDcache.scala:793:20]
  wire [21:0]      _meta_io_resp_0_tag;	// @[NBDcache.scala:793:20]
  wire [1:0]       _meta_io_resp_1_coh_state;	// @[NBDcache.scala:793:20]
  wire [21:0]      _meta_io_resp_1_tag;	// @[NBDcache.scala:793:20]
  wire [1:0]       _meta_io_resp_2_coh_state;	// @[NBDcache.scala:793:20]
  wire [21:0]      _meta_io_resp_2_tag;	// @[NBDcache.scala:793:20]
  wire [1:0]       _meta_io_resp_3_coh_state;	// @[NBDcache.scala:793:20]
  wire [21:0]      _meta_io_resp_3_tag;	// @[NBDcache.scala:793:20]
  wire             _dtlb_io_req_ready;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_miss;	// @[NBDcache.scala:739:20]
  wire [31:0]      _dtlb_io_resp_paddr;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_pf_ld;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_pf_st;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_ae_ld;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_ae_st;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_ma_ld;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_resp_ma_st;	// @[NBDcache.scala:739:20]
  wire             _dtlb_io_ptw_req_valid;	// @[NBDcache.scala:739:20]
  wire             _mshrs_io_req_ready;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_resp_valid;	// @[NBDcache.scala:712:21]
  wire [39:0]      _mshrs_io_resp_bits_addr;	// @[NBDcache.scala:712:21]
  wire [6:0]       _mshrs_io_resp_bits_tag;	// @[NBDcache.scala:712:21]
  wire [4:0]       _mshrs_io_resp_bits_cmd;	// @[NBDcache.scala:712:21]
  wire [1:0]       _mshrs_io_resp_bits_size;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_resp_bits_signed;	// @[NBDcache.scala:712:21]
  wire [1:0]       _mshrs_io_resp_bits_dprv;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_resp_bits_dv;	// @[NBDcache.scala:712:21]
  wire [63:0]      _mshrs_io_resp_bits_data;	// @[NBDcache.scala:712:21]
  wire [7:0]       _mshrs_io_resp_bits_mask;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_resp_bits_has_data;	// @[NBDcache.scala:712:21]
  wire [63:0]      _mshrs_io_resp_bits_store_data;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_secondary_miss;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_mem_acquire_valid;	// @[NBDcache.scala:712:21]
  wire [2:0]       _mshrs_io_mem_acquire_bits_opcode;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_mem_acquire_bits_size;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_refill_way_en;	// @[NBDcache.scala:712:21]
  wire [9:0]       _mshrs_io_refill_addr;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_meta_read_valid;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_meta_read_bits_idx;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_meta_write_valid;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_meta_write_bits_idx;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_meta_write_bits_way_en;	// @[NBDcache.scala:712:21]
  wire [1:0]       _mshrs_io_meta_write_bits_data_coh_state;	// @[NBDcache.scala:712:21]
  wire [21:0]      _mshrs_io_meta_write_bits_data_tag;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_replay_valid;	// @[NBDcache.scala:712:21]
  wire [39:0]      _mshrs_io_replay_bits_addr;	// @[NBDcache.scala:712:21]
  wire [6:0]       _mshrs_io_replay_bits_tag;	// @[NBDcache.scala:712:21]
  wire [4:0]       _mshrs_io_replay_bits_cmd;	// @[NBDcache.scala:712:21]
  wire [1:0]       _mshrs_io_replay_bits_size;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_replay_bits_signed;	// @[NBDcache.scala:712:21]
  wire [1:0]       _mshrs_io_replay_bits_dprv;	// @[NBDcache.scala:712:21]
  wire [63:0]      _mshrs_io_replay_bits_data;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_wb_req_valid;	// @[NBDcache.scala:712:21]
  wire [21:0]      _mshrs_io_wb_req_bits_tag;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_wb_req_bits_idx;	// @[NBDcache.scala:712:21]
  wire [2:0]       _mshrs_io_wb_req_bits_source;	// @[NBDcache.scala:712:21]
  wire [2:0]       _mshrs_io_wb_req_bits_param;	// @[NBDcache.scala:712:21]
  wire [3:0]       _mshrs_io_wb_req_bits_way_en;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_probe_rdy;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_fence_rdy;	// @[NBDcache.scala:712:21]
  wire             _mshrs_io_replay_next;	// @[NBDcache.scala:712:21]
  wire             _prober_io_req_ready;	// @[NBDcache.scala:711:22]
  wire             _prober_io_rep_valid;	// @[NBDcache.scala:711:22]
  wire [2:0]       _prober_io_rep_bits_param;	// @[NBDcache.scala:711:22]
  wire [3:0]       _prober_io_rep_bits_size;	// @[NBDcache.scala:711:22]
  wire [2:0]       _prober_io_rep_bits_source;	// @[NBDcache.scala:711:22]
  wire [31:0]      _prober_io_rep_bits_address;	// @[NBDcache.scala:711:22]
  wire             _prober_io_meta_read_valid;	// @[NBDcache.scala:711:22]
  wire [3:0]       _prober_io_meta_read_bits_idx;	// @[NBDcache.scala:711:22]
  wire [21:0]      _prober_io_meta_read_bits_tag;	// @[NBDcache.scala:711:22]
  wire             _prober_io_meta_write_valid;	// @[NBDcache.scala:711:22]
  wire [3:0]       _prober_io_meta_write_bits_idx;	// @[NBDcache.scala:711:22]
  wire [3:0]       _prober_io_meta_write_bits_way_en;	// @[NBDcache.scala:711:22]
  wire [1:0]       _prober_io_meta_write_bits_data_coh_state;	// @[NBDcache.scala:711:22]
  wire [21:0]      _prober_io_meta_write_bits_data_tag;	// @[NBDcache.scala:711:22]
  wire             _prober_io_wb_req_valid;	// @[NBDcache.scala:711:22]
  wire [21:0]      _prober_io_wb_req_bits_tag;	// @[NBDcache.scala:711:22]
  wire [3:0]       _prober_io_wb_req_bits_idx;	// @[NBDcache.scala:711:22]
  wire [2:0]       _prober_io_wb_req_bits_source;	// @[NBDcache.scala:711:22]
  wire [2:0]       _prober_io_wb_req_bits_param;	// @[NBDcache.scala:711:22]
  wire [3:0]       _prober_io_wb_req_bits_way_en;	// @[NBDcache.scala:711:22]
  wire             _wb_io_req_ready;	// @[NBDcache.scala:710:18]
  wire             _wb_io_meta_read_valid;	// @[NBDcache.scala:710:18]
  wire [3:0]       _wb_io_meta_read_bits_idx;	// @[NBDcache.scala:710:18]
  wire [21:0]      _wb_io_meta_read_bits_tag;	// @[NBDcache.scala:710:18]
  wire             _wb_io_data_req_valid;	// @[NBDcache.scala:710:18]
  wire [3:0]       _wb_io_data_req_bits_way_en;	// @[NBDcache.scala:710:18]
  wire [9:0]       _wb_io_data_req_bits_addr;	// @[NBDcache.scala:710:18]
  wire             _wb_io_release_valid;	// @[NBDcache.scala:710:18]
  wire [2:0]       _wb_io_release_bits_opcode;	// @[NBDcache.scala:710:18]
  wire [2:0]       _wb_io_release_bits_param;	// @[NBDcache.scala:710:18]
  wire [2:0]       _wb_io_release_bits_source;	// @[NBDcache.scala:710:18]
  wire [31:0]      _wb_io_release_bits_address;	// @[NBDcache.scala:710:18]
  wire [63:0]      _wb_io_release_bits_data;	// @[NBDcache.scala:710:18]
  reg              s1_valid;	// @[NBDcache.scala:715:25]
  reg  [39:0]      s1_req_addr;	// @[NBDcache.scala:716:19]
  reg  [6:0]       s1_req_tag;	// @[NBDcache.scala:716:19]
  reg  [4:0]       s1_req_cmd;	// @[NBDcache.scala:716:19]
  reg  [1:0]       s1_req_size;	// @[NBDcache.scala:716:19]
  reg              s1_req_signed;	// @[NBDcache.scala:716:19]
  reg  [1:0]       s1_req_dprv;	// @[NBDcache.scala:716:19]
  reg              s1_req_phys;	// @[NBDcache.scala:716:19]
  reg              s1_replay;	// @[NBDcache.scala:718:26]
  reg              s1_clk_en;	// @[NBDcache.scala:719:22]
  wire             s1_sfence = s1_req_cmd == 5'h14;	// @[NBDcache.scala:716:19, :720:30]
  reg              s2_valid_REG;	// @[NBDcache.scala:722:25]
  wire             s2_valid = s2_valid_REG & {_io_cpu_s2_xcpt_ma_ld_output, _io_cpu_s2_xcpt_ma_st_output, _io_cpu_s2_xcpt_pf_ld_output, _io_cpu_s2_xcpt_pf_st_output, _io_cpu_s2_xcpt_gf_ld_output, _io_cpu_s2_xcpt_gf_st_output, _io_cpu_s2_xcpt_ae_ld_output, _io_cpu_s2_xcpt_ae_st_output} == 8'h0;	// @[NBDcache.scala:722:{25,66,85,92}, :1041:24]
  reg  [39:0]      s2_req_addr;	// @[NBDcache.scala:723:19]
  reg  [6:0]       s2_req_tag;	// @[NBDcache.scala:723:19]
  reg  [4:0]       s2_req_cmd;	// @[NBDcache.scala:723:19]
  reg  [1:0]       s2_req_size;	// @[NBDcache.scala:723:19]
  reg              s2_req_signed;	// @[NBDcache.scala:723:19]
  reg              s2_req_phys;	// @[NBDcache.scala:723:19]
  reg  [63:0]      s2_req_data;	// @[NBDcache.scala:723:19]
  reg              s2_replay_REG;	// @[NBDcache.scala:724:26]
  wire             cache_resp_bits_replay = s2_replay_REG & s2_req_cmd != 5'h5;	// @[NBDcache.scala:723:19, :724:{26,47,61}]
  reg              s3_valid;	// @[NBDcache.scala:728:25]
  reg  [39:0]      s3_req_addr;	// @[NBDcache.scala:729:19]
  reg  [4:0]       s3_req_cmd;	// @[NBDcache.scala:729:19]
  reg  [63:0]      s3_req_data;	// @[NBDcache.scala:729:19]
  reg  [3:0]       s3_way;	// @[NBDcache.scala:730:19]
  wire             _s1_write_T_3 = s1_req_cmd == 5'h7;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_5 = s1_req_cmd == 5'h4;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_6 = s1_req_cmd == 5'h9;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_7 = s1_req_cmd == 5'hA;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_8 = s1_req_cmd == 5'hB;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_12 = s1_req_cmd == 5'h8;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_13 = s1_req_cmd == 5'hC;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_14 = s1_req_cmd == 5'hD;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_15 = s1_req_cmd == 5'hE;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             _s1_write_T_16 = s1_req_cmd == 5'hF;	// @[NBDcache.scala:716:19, package.scala:16:47]
  wire             s1_read = s1_req_cmd == 5'h0 | s1_req_cmd == 5'h10 | s1_req_cmd == 5'h6 | _s1_write_T_3 | _s1_write_T_5 | _s1_write_T_6 | _s1_write_T_7 | _s1_write_T_8 | _s1_write_T_12 | _s1_write_T_13 | _s1_write_T_14 | _s1_write_T_15 | _s1_write_T_16;	// @[Consts.scala:85:68, NBDcache.scala:716:19, package.scala:16:47]
  wire             _T_1 = s1_req_cmd == 5'h11;	// @[Consts.scala:86:49, NBDcache.scala:716:19]
  wire             s1_write = s1_req_cmd == 5'h1 | _T_1 | _s1_write_T_3 | _s1_write_T_5 | _s1_write_T_6 | _s1_write_T_7 | _s1_write_T_8 | _s1_write_T_12 | _s1_write_T_13 | _s1_write_T_14 | _s1_write_T_15 | _s1_write_T_16;	// @[Consts.scala:86:{32,49,76}, NBDcache.scala:716:19, package.scala:16:47]
  wire             _dtlb_io_req_valid_T_2 = s1_valid & ~io_cpu_s1_kill & (s1_read | s1_write | s1_req_cmd == 5'h2 | s1_req_cmd == 5'h3);	// @[Consts.scala:84:{35,52}, :85:68, :86:76, NBDcache.scala:715:25, :716:19, :717:37, :735:42, :742:52]
  reg  [1:0]       s2_hit_state_r_state;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_hit_state_r_1_state;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_hit_state_r_2_state;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_hit_state_r_3_state;	// @[Reg.scala:19:16]
  wire [1:0]       mshrs_io_req_bits_old_meta_meta_coh_state = (s2_tag_match_way[0] ? s2_hit_state_r_state : 2'h0) | (s2_tag_match_way[1] ? s2_hit_state_r_1_state : 2'h0) | (s2_tag_match_way[2] ? s2_hit_state_r_2_state : 2'h0) | (s2_tag_match_way[3] ? s2_hit_state_r_3_state : 2'h0);	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
  wire             _T_161 = s2_req_cmd == 5'h1;	// @[Consts.scala:86:32, NBDcache.scala:723:19]
  wire             _T_162 = s2_req_cmd == 5'h11;	// @[Consts.scala:86:49, NBDcache.scala:723:19]
  wire             s2_sc = s2_req_cmd == 5'h7;	// @[Consts.scala:86:66, NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_7 = s2_req_cmd == 5'h4;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_8 = s2_req_cmd == 5'h9;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_9 = s2_req_cmd == 5'hA;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_10 = s2_req_cmd == 5'hB;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_14 = s2_req_cmd == 5'h8;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_15 = s2_req_cmd == 5'hC;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_16 = s2_req_cmd == 5'hD;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_17 = s2_req_cmd == 5'hE;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_18 = s2_req_cmd == 5'hF;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _mshrs_io_req_valid_T_3 = s2_req_cmd == 5'h3;	// @[Consts.scala:84:52, :87:54, NBDcache.scala:723:19]
  wire             s2_lr = s2_req_cmd == 5'h6;	// @[Consts.scala:87:71, NBDcache.scala:723:19, package.scala:16:47]
  wire [3:0]       _T_12 = {_T_161 | _T_162 | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18, _T_161 | _T_162 | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18 | _mshrs_io_req_valid_T_3 | s2_lr, mshrs_io_req_bits_old_meta_meta_coh_state};	// @[Cat.scala:33:92, Consts.scala:86:{32,49,66,76}, :87:{54,64,71}, Mux.scala:27:73, package.scala:16:47]
  wire [1:0]       _T_39 = {1'h0, _T_12 == 4'hC};	// @[Cat.scala:33:92, Misc.scala:34:36, :48:20, package.scala:16:47]
  wire [15:0][1:0] _GEN_0 = {{2'h3}, {2'h3}, {2'h2}, {_T_39}, {_T_39}, {_T_39}, {_T_39}, {_T_39}, {2'h3}, {2'h2}, {2'h2}, {2'h1}, {2'h3}, {2'h2}, {2'h1}, {2'h0}};	// @[Cat.scala:33:92, Consts.scala:84:52, Misc.scala:34:36, :48:20]
  wire             _T_76 = (|s2_tag_match_way) & (_T_12 == 4'h3 | _T_12 == 4'h2 | _T_12 == 4'h1 | _T_12 == 4'h7 | _T_12 == 4'h6 | (&_T_12) | _T_12 == 4'hE);	// @[Cat.scala:33:92, Misc.scala:34:9, :48:20, NBDcache.scala:838:39, :841:29, ReadyValidCancel.scala:68:19, Reg.scala:19:16, package.scala:16:47]
  wire             s2_hit = _T_76 & mshrs_io_req_bits_old_meta_meta_coh_state == _GEN_0[_T_12];	// @[Cat.scala:33:92, Metadata.scala:46:46, Misc.scala:34:36, :48:20, Mux.scala:27:73, NBDcache.scala:841:{29,50}]
  reg  [6:0]       lrsc_count;	// @[NBDcache.scala:844:27]
  reg  [33:0]      lrsc_addr;	// @[NBDcache.scala:846:22]
  wire             s2_lrsc_addr_match = (|(lrsc_count[6:2])) & lrsc_addr == s2_req_addr[39:6];	// @[NBDcache.scala:723:19, :824:48, :844:27, :845:31, :846:22, :848:{39,52}]
  wire             s2_sc_fail = s2_sc & ~s2_lrsc_addr_match;	// @[Consts.scala:86:66, NBDcache.scala:848:39, :849:{26,29}]
  wire             _cache_resp_valid_T = s2_valid_masked & s2_hit;	// @[NBDcache.scala:841:50, :851:25, :995:31]
  reg  [63:0]      regs_0;	// @[NBDcache.scala:866:19]
  reg  [63:0]      regs_1_0;	// @[NBDcache.scala:866:19]
  reg  [63:0]      regs_2_0;	// @[NBDcache.scala:866:19]
  reg  [63:0]      regs_3_0;	// @[NBDcache.scala:866:19]
  wire [63:0]      s2_data_muxed = (s2_tag_match_way[0] ? regs_0 : 64'h0) | (s2_tag_match_way[1] ? regs_1_0 : 64'h0) | (s2_tag_match_way[2] ? regs_2_0 : 64'h0) | (s2_tag_match_way[3] ? regs_3_0 : 64'h0);	// @[Mux.scala:27:73, :29:36, NBDcache.scala:866:19, Reg.scala:19:16]
  reg  [1:0]       s2_replaced_way_en_r;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_repl_meta_r_coh_state;	// @[Reg.scala:19:16]
  reg  [21:0]      s2_repl_meta_r_tag;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_repl_meta_r_1_coh_state;	// @[Reg.scala:19:16]
  reg  [21:0]      s2_repl_meta_r_1_tag;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_repl_meta_r_2_coh_state;	// @[Reg.scala:19:16]
  reg  [21:0]      s2_repl_meta_r_2_tag;	// @[Reg.scala:19:16]
  reg  [1:0]       s2_repl_meta_r_3_coh_state;	// @[Reg.scala:19:16]
  reg  [21:0]      s2_repl_meta_r_3_tag;	// @[Reg.scala:19:16]
  wire             _s2_repl_meta_T_8 = s2_replaced_way_en_r == 2'h0;	// @[Mux.scala:29:36, Reg.scala:19:16]
  wire             _s2_repl_meta_T_9 = s2_replaced_way_en_r == 2'h1;	// @[Cat.scala:33:92, Mux.scala:29:36, Reg.scala:19:16]
  wire             _s2_repl_meta_T_10 = s2_replaced_way_en_r == 2'h2;	// @[Mux.scala:29:36, Reg.scala:19:16]
  wire             _cache_resp_bits_has_data_T = s2_req_cmd == 5'h0;	// @[NBDcache.scala:723:19, package.scala:16:47]
  wire             _cache_resp_bits_has_data_T_1 = s2_req_cmd == 5'h10;	// @[NBDcache.scala:723:19, package.scala:16:47]
  assign tl_out_d_ready = _writeArb_io_in_1_ready | ~(auto_out_d_bits_opcode[0]);	// @[Edges.scala:106:36, NBDcache.scala:802:24, :935:{45,48}]
  reg  [8:0]       beatsLeft;	// @[Arbiter.scala:88:30]
  wire             idle = beatsLeft == 9'h0;	// @[Arbiter.scala:88:30, :89:28]
  wire             earlyWinner_1 = ~_wb_io_release_valid & _prober_io_rep_valid;	// @[Arbiter.scala:17:61, :98:79, NBDcache.scala:710:18, :711:22]
  wire             _sink_ACancel_earlyValid_T = _wb_io_release_valid | _prober_io_rep_valid;	// @[Arbiter.scala:108:36, NBDcache.scala:710:18, :711:22]
  reg              state_0;	// @[Arbiter.scala:117:26]
  reg              state_1;	// @[Arbiter.scala:117:26]
  wire             muxStateEarly_0 = idle ? _wb_io_release_valid : state_0;	// @[Arbiter.scala:89:28, :117:26, :118:30, NBDcache.scala:710:18]
  wire             muxStateEarly_1 = idle ? earlyWinner_1 : state_1;	// @[Arbiter.scala:89:28, :98:79, :117:26, :118:30]
  wire             out_2_valid = idle ? _sink_ACancel_earlyValid_T : state_0 & _wb_io_release_valid | state_1 & _prober_io_rep_valid;	// @[Arbiter.scala:89:28, :108:36, :117:26, :126:29, Mux.scala:27:73, NBDcache.scala:710:18, :711:22]
  wire [3:0]       out_2_bits_size = (muxStateEarly_0 ? 4'h6 : 4'h0) | (muxStateEarly_1 ? _prober_io_rep_bits_size : 4'h0);	// @[Arbiter.scala:118:30, Mux.scala:27:73, NBDcache.scala:711:22, ReadyValidCancel.scala:68:19]
  wire [2:0]       out_2_bits_opcode = (muxStateEarly_0 ? _wb_io_release_bits_opcode : 3'h0) | {muxStateEarly_1, 2'h0};	// @[Arbiter.scala:118:30, Mux.scala:27:73, NBDcache.scala:710:18]
  reg              s4_valid;	// @[NBDcache.scala:960:25]
  reg  [39:0]      s4_req_addr;	// @[Reg.scala:19:16]
  reg  [4:0]       s4_req_cmd;	// @[Reg.scala:19:16]
  reg  [63:0]      s4_req_data;	// @[Reg.scala:19:16]
  reg  [63:0]      s2_store_bypass_data;	// @[NBDcache.scala:967:33]
  reg              s2_store_bypass;	// @[NBDcache.scala:968:28]
  wire [63:0]      s2_data_word = s2_store_bypass ? s2_store_bypass_data : s2_data_muxed;	// @[Mux.scala:27:73, NBDcache.scala:967:33, :968:28, :979:25]
  wire [1:0]       _amoalu_io_mask_T = {s2_req_addr[0] | (|s2_req_size), ~(s2_req_addr[0])};	// @[AMOALU.scala:18:{27,42,53}, :19:22, Cat.scala:33:92, NBDcache.scala:723:19]
  wire [3:0]       _amoalu_io_mask_T_1 = {(s2_req_addr[1] ? _amoalu_io_mask_T : 2'h0) | {2{s2_req_size[1]}}, s2_req_addr[1] ? 2'h0 : _amoalu_io_mask_T};	// @[AMOALU.scala:18:{22,27,42,47,53}, :19:22, Cat.scala:33:92, NBDcache.scala:723:19]
  wire             s1_nack = _dtlb_io_req_valid_T_2 & _dtlb_io_resp_miss | _io_cpu_s2_nack_output | s1_req_addr[9:6] == _prober_io_meta_write_bits_idx & ~_prober_io_req_ready;	// @[NBDcache.scala:711:22, :716:19, :739:20, :742:52, :988:{35,74}, :989:{28,44,78,81}, :1032:30]
  reg              s2_nack_hit;	// @[Reg.scala:19:16]
  assign _GEN = ~s2_nack_hit & s2_valid_masked & ~s2_hit & (s2_req_cmd == 5'h2 | _mshrs_io_req_valid_T_3 | _cache_resp_bits_has_data_T | _cache_resp_bits_has_data_T_1 | s2_lr | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18 | _T_161 | _T_162);	// @[Consts.scala:84:35, :86:{32,49,66}, :87:{54,71}, NBDcache.scala:723:19, :841:50, :903:{22,44,101}, :991:{22,43}, :995:31, Reg.scala:19:16, package.scala:16:47]
  wire             s2_nack_miss = ~s2_hit & ~_mshrs_io_req_ready;	// @[NBDcache.scala:712:21, :841:50, :903:44, :993:{30,33}]
  wire             s2_nack = s2_nack_hit | s2_hit & _mshrs_io_secondary_miss | s2_nack_miss;	// @[NBDcache.scala:712:21, :841:50, :992:31, :993:30, :994:47, Reg.scala:19:16]
  assign s2_valid_masked = s2_valid & ~s2_nack;	// @[NBDcache.scala:722:66, :994:47, :995:{31,34}]
  reg              block_miss;	// @[NBDcache.scala:1003:27]
  wire             _GEN_1 = block_miss | s1_nack | ~_readArb_io_in_3_ready | ~_metaReadArb_io_in_4_ready | ~_dtlb_io_req_ready & ~io_cpu_req_bits_phys;	// @[NBDcache.scala:714:20, :739:20, :749:{9,28,31,54,73}, :794:27, :801:23, :814:{9,38,57}, :820:{9,34,53}, :988:74, :1003:27, :1005:32, :1006:22]
  wire             _io_cpu_resp_bits_data_word_bypass_T_1 = s2_req_size == 2'h2;	// @[AMOALU.scala:43:26, NBDcache.scala:723:19]
  wire [31:0]      cache_resp_bits_data_shifted = s2_req_addr[2] ? s2_data_word[63:32] : s2_data_word[31:0];	// @[AMOALU.scala:18:27, :40:{24,37,55}, NBDcache.scala:723:19, :979:25]
  wire [15:0]      cache_resp_bits_data_shifted_1 = s2_req_addr[1] ? cache_resp_bits_data_shifted[31:16] : cache_resp_bits_data_shifted[15:0];	// @[AMOALU.scala:18:27, :40:{24,37,55}, NBDcache.scala:723:19]
  wire [7:0]       cache_resp_bits_data_zeroed_2 = s2_sc ? 8'h0 : s2_req_addr[0] ? cache_resp_bits_data_shifted_1[15:8] : cache_resp_bits_data_shifted_1[7:0];	// @[AMOALU.scala:18:27, :40:{24,37,55}, :42:23, Consts.scala:86:66, NBDcache.scala:723:19]
  reg              mshrs_io_resp_ready_REG;	// @[NBDcache.scala:1030:33]
  assign _io_cpu_s2_nack_output = s2_valid & s2_nack;	// @[NBDcache.scala:722:66, :994:47, :1032:30]
  wire [31:0]      io_cpu_resp_bits_data_word_bypass_shifted = s2_req_addr[2] ? s2_data_word[63:32] : s2_data_word[31:0];	// @[AMOALU.scala:18:27, :40:{24,37,55}, NBDcache.scala:723:19, :979:25]
  reg              io_cpu_s2_xcpt_REG;	// @[NBDcache.scala:1041:32]
  reg              io_cpu_s2_xcpt_r_pf_ld;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_pf_st;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_gf_ld;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_gf_st;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_ae_ld;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_ae_st;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_ma_ld;	// @[Reg.scala:19:16]
  reg              io_cpu_s2_xcpt_r_ma_st;	// @[Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_pf_ld_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_pf_ld;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_pf_st_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_pf_st;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_gf_ld_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_gf_ld;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_gf_st_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_gf_st;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_ae_ld_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_ae_ld;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_ae_st_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_ae_st;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_ma_ld_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_ma_ld;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  assign _io_cpu_s2_xcpt_ma_st_output = io_cpu_s2_xcpt_REG & io_cpu_s2_xcpt_r_ma_st;	// @[NBDcache.scala:1041:{24,32}, Reg.scala:19:16]
  wire             _io_cpu_perf_acquire_T = auto_out_a_ready & _mshrs_io_mem_acquire_valid;	// @[Decoupled.scala:51:35, NBDcache.scala:712:21]
  wire [26:0]      _io_cpu_perf_acquire_beats1_decode_T_1 = 27'hFFF << _mshrs_io_mem_acquire_bits_size;	// @[NBDcache.scala:712:21, package.scala:235:71]
  reg  [8:0]       io_cpu_perf_acquire_counter;	// @[Edges.scala:229:27]
  wire             _io_cpu_perf_release_T = auto_out_c_ready & out_2_valid;	// @[Arbiter.scala:126:29, Decoupled.scala:51:35]
  wire [26:0]      _io_cpu_perf_release_beats1_decode_T_1 = 27'hFFF << out_2_bits_size;	// @[Mux.scala:27:73, package.scala:235:71]
  reg  [8:0]       io_cpu_perf_release_counter;	// @[Edges.scala:229:27]
  wire [6:0]       _lrsc_count_T_1 = lrsc_count - 7'h1;	// @[NBDcache.scala:844:27, :850:54]
  wire             _s1_tag_eq_way_WIRE_0 = _meta_io_resp_0_tag == _dtlb_io_resp_paddr[31:10];	// @[NBDcache.scala:739:20, :793:20, :833:{62,75}]
  wire             _s1_tag_eq_way_WIRE_1 = _meta_io_resp_1_tag == _dtlb_io_resp_paddr[31:10];	// @[NBDcache.scala:739:20, :793:20, :833:{62,75}]
  wire             _s1_tag_eq_way_WIRE_2 = _meta_io_resp_2_tag == _dtlb_io_resp_paddr[31:10];	// @[NBDcache.scala:739:20, :793:20, :833:{62,75}]
  wire             _s1_tag_eq_way_WIRE_3 = _meta_io_resp_3_tag == _dtlb_io_resp_paddr[31:10];	// @[NBDcache.scala:739:20, :793:20, :833:{62,75}]
  wire             _T_74 = _cache_resp_valid_T | cache_resp_bits_replay;	// @[NBDcache.scala:724:47, :851:{25,35}]
  wire [1:0]       _GEN_2 = {_lfsr_prng_io_out_1, _lfsr_prng_io_out_0};	// @[OneHot.scala:57:35, PRNG.scala:91:22]
  wire [36:0]      _GEN_3 = {8'h0, _dtlb_io_resp_paddr[31:3]};	// @[NBDcache.scala:739:20, :966:{32,47}]
  wire             _T_184 = (s2_valid_masked | cache_resp_bits_replay) & ~s2_sc_fail & _GEN_3 == s2_req_addr[39:3] & (_T_161 | _T_162 | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18);	// @[Consts.scala:86:{32,49,66,76}, NBDcache.scala:723:19, :724:47, :849:26, :882:59, :963:23, :966:{47,61,77}, :995:31, package.scala:16:47]
  wire             _T_212 = s3_valid & _GEN_3 == s3_req_addr[39:3] & (s3_req_cmd == 5'h1 | s3_req_cmd == 5'h11 | s3_req_cmd == 5'h7 | s3_req_cmd == 5'h4 | s3_req_cmd == 5'h9 | s3_req_cmd == 5'hA | s3_req_cmd == 5'hB | s3_req_cmd == 5'h8 | s3_req_cmd == 5'hC | s3_req_cmd == 5'hD | s3_req_cmd == 5'hE | s3_req_cmd == 5'hF);	// @[Consts.scala:86:{32,49,66,76}, NBDcache.scala:728:25, :729:19, :966:{47,61,77}, package.scala:16:47]
  wire             _T_242 = _T_184 | _T_212 | s4_valid & _GEN_3 == s4_req_addr[39:3] & (s4_req_cmd == 5'h1 | s4_req_cmd == 5'h11 | s4_req_cmd == 5'h7 | s4_req_cmd == 5'h4 | s4_req_cmd == 5'h9 | s4_req_cmd == 5'hA | s4_req_cmd == 5'hB | s4_req_cmd == 5'h8 | s4_req_cmd == 5'hC | s4_req_cmd == 5'hD | s4_req_cmd == 5'hE | s4_req_cmd == 5'hF);	// @[Consts.scala:86:{32,49,66,76}, NBDcache.scala:960:25, :966:{47,61,77}, :971:38, Reg.scala:19:16, package.scala:16:47]
  wire             _mshrs_io_resp_ready_T = s1_valid | s1_replay;	// @[NBDcache.scala:715:25, :718:26, :990:49]
  always @(posedge clock) begin
    if (reset) begin
      s1_valid <= 1'h0;	// @[NBDcache.scala:715:25]
      s1_replay <= 1'h0;	// @[NBDcache.scala:718:26]
      s2_valid_REG <= 1'h0;	// @[NBDcache.scala:722:25]
      s2_replay_REG <= 1'h0;	// @[NBDcache.scala:724:26]
      s3_valid <= 1'h0;	// @[NBDcache.scala:728:25]
      lrsc_count <= 7'h0;	// @[NBDcache.scala:844:27, :852:18, :856:29, :857:18]
      beatsLeft <= 9'h0;	// @[Arbiter.scala:88:30]
      state_0 <= 1'h0;	// @[Arbiter.scala:117:26]
      state_1 <= 1'h0;	// @[Arbiter.scala:117:26]
      s4_valid <= 1'h0;	// @[NBDcache.scala:960:25]
      block_miss <= 1'h0;	// @[NBDcache.scala:1003:27]
      io_cpu_perf_acquire_counter <= 9'h0;	// @[Edges.scala:229:27]
      io_cpu_perf_release_counter <= 9'h0;	// @[Edges.scala:229:27]
    end
    else begin
      s1_valid <= ~_GEN_1 & io_cpu_req_valid;	// @[Decoupled.scala:51:35, NBDcache.scala:714:20, :715:25, :749:{54,73}, :814:{38,57}, :820:{34,53}, :1005:32, :1006:22]
      s1_replay <= _mshrs_io_replay_valid & _readArb_io_in_1_ready;	// @[NBDcache.scala:712:21, :718:26, :801:23, :917:38]
      s2_valid_REG <= s1_valid & ~io_cpu_s1_kill & ~s1_sfence;	// @[NBDcache.scala:715:25, :717:37, :720:30, :722:{25,42,45}]
      s2_replay_REG <= s1_replay;	// @[NBDcache.scala:718:26, :724:26]
      s3_valid <= (_cache_resp_valid_T | cache_resp_bits_replay) & ~s2_sc_fail & (_T_161 | _T_162 | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18);	// @[Consts.scala:86:{32,49,66,76}, NBDcache.scala:724:47, :728:25, :849:26, :851:25, :882:{42,59,71}, package.scala:16:47]
      if (s2_valid_masked & ~_T_76 & s2_lrsc_addr_match)	// @[NBDcache.scala:841:29, :848:39, :860:{28,65}, :995:31]
        lrsc_count <= 7'h0;	// @[NBDcache.scala:844:27, :852:18, :856:29, :857:18]
      else if (_T_74) begin	// @[NBDcache.scala:851:35]
        if (|lrsc_count)	// @[NBDcache.scala:844:27, :850:20]
          lrsc_count <= 7'h0;	// @[NBDcache.scala:844:27, :852:18, :856:29, :857:18]
        else if (s2_lr)	// @[Consts.scala:87:71]
          lrsc_count <= 7'h4F;	// @[NBDcache.scala:844:27, :853:34]
        else if (|lrsc_count)	// @[NBDcache.scala:844:27, :850:20]
          lrsc_count <= _lrsc_count_T_1;	// @[NBDcache.scala:844:27, :850:54]
      end
      else if (|lrsc_count)	// @[NBDcache.scala:844:27, :850:20]
        lrsc_count <= _lrsc_count_T_1;	// @[NBDcache.scala:844:27, :850:54]
      if (idle & auto_out_c_ready) begin	// @[Arbiter.scala:89:28, :90:24]
        if (_wb_io_release_valid & _wb_io_release_bits_opcode[0])	// @[Arbiter.scala:112:73, Edges.scala:102:36, :221:14, NBDcache.scala:710:18]
          beatsLeft <= 9'h7;	// @[Arbiter.scala:88:30, Edges.scala:220:59]
        else	// @[Arbiter.scala:112:73, Edges.scala:221:14]
          beatsLeft <= 9'h0;	// @[Arbiter.scala:88:30]
      end
      else	// @[Arbiter.scala:90:24]
        beatsLeft <= beatsLeft - {8'h0, auto_out_c_ready & out_2_valid};	// @[Arbiter.scala:88:30, :114:52, :126:29, ReadyValidCancel.scala:49:33]
      if (idle) begin	// @[Arbiter.scala:89:28]
        state_0 <= _wb_io_release_valid;	// @[Arbiter.scala:117:26, NBDcache.scala:710:18]
        state_1 <= ~_wb_io_release_valid & _prober_io_rep_valid;	// @[Arbiter.scala:17:61, :99:79, :117:26, NBDcache.scala:710:18, :711:22]
      end
      s4_valid <= s3_valid;	// @[NBDcache.scala:728:25, :960:25]
      block_miss <= (s2_valid | block_miss) & s2_nack_miss;	// @[NBDcache.scala:722:66, :993:30, :1003:27, :1004:{27,42}]
      if (_io_cpu_perf_acquire_T) begin	// @[Decoupled.scala:51:35]
        if (io_cpu_perf_acquire_counter == 9'h0) begin	// @[Edges.scala:229:27, :231:25]
          if (_mshrs_io_mem_acquire_bits_opcode[2])	// @[Edges.scala:92:37, NBDcache.scala:712:21]
            io_cpu_perf_acquire_counter <= 9'h0;	// @[Edges.scala:229:27]
          else	// @[Edges.scala:92:37]
            io_cpu_perf_acquire_counter <= ~(_io_cpu_perf_acquire_beats1_decode_T_1[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
        end
        else	// @[Edges.scala:231:25]
          io_cpu_perf_acquire_counter <= io_cpu_perf_acquire_counter - 9'h1;	// @[Edges.scala:229:27, :230:28]
      end
      if (_io_cpu_perf_release_T) begin	// @[Decoupled.scala:51:35]
        if (io_cpu_perf_release_counter == 9'h0) begin	// @[Edges.scala:229:27, :231:25]
          if (out_2_bits_opcode[0])	// @[Edges.scala:102:36, Mux.scala:27:73]
            io_cpu_perf_release_counter <= ~(_io_cpu_perf_release_beats1_decode_T_1[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:102:36]
            io_cpu_perf_release_counter <= 9'h0;	// @[Edges.scala:229:27]
        end
        else	// @[Edges.scala:231:25]
          io_cpu_perf_release_counter <= io_cpu_perf_release_counter - 9'h1;	// @[Edges.scala:229:27, :230:28]
      end
    end
    if (_mshrs_io_replay_valid) begin	// @[NBDcache.scala:712:21]
      s1_req_addr <= _mshrs_io_replay_bits_addr;	// @[NBDcache.scala:712:21, :716:19]
      s1_req_tag <= _mshrs_io_replay_bits_tag;	// @[NBDcache.scala:712:21, :716:19]
      s1_req_cmd <= _mshrs_io_replay_bits_cmd;	// @[NBDcache.scala:712:21, :716:19]
      s1_req_size <= _mshrs_io_replay_bits_size;	// @[NBDcache.scala:712:21, :716:19]
      s1_req_signed <= _mshrs_io_replay_bits_signed;	// @[NBDcache.scala:712:21, :716:19]
      s1_req_dprv <= _mshrs_io_replay_bits_dprv;	// @[NBDcache.scala:712:21, :716:19]
    end
    else begin	// @[NBDcache.scala:712:21]
      if (_prober_io_meta_read_valid)	// @[NBDcache.scala:711:22]
        s1_req_addr <= {8'h0, _prober_io_meta_read_bits_tag, _prober_io_meta_read_bits_idx, 6'h0};	// @[NBDcache.scala:711:22, :716:19, :763:76, :767:17]
      else if (_wb_io_meta_read_valid)	// @[NBDcache.scala:710:18]
        s1_req_addr <= {8'h0, _wb_io_meta_read_bits_tag, _wb_io_meta_read_bits_idx, 6'h0};	// @[NBDcache.scala:710:18, :716:19, :763:{17,76}]
      else if (io_cpu_req_valid)
        s1_req_addr <= io_cpu_req_bits_addr;	// @[NBDcache.scala:716:19]
      if (io_cpu_req_valid) begin
        s1_req_tag <= io_cpu_req_bits_tag;	// @[NBDcache.scala:716:19]
        s1_req_cmd <= io_cpu_req_bits_cmd;	// @[NBDcache.scala:716:19]
        s1_req_size <= io_cpu_req_bits_size;	// @[NBDcache.scala:716:19]
        s1_req_signed <= io_cpu_req_bits_signed;	// @[NBDcache.scala:716:19]
        s1_req_dprv <= io_cpu_req_bits_dprv;	// @[NBDcache.scala:716:19]
      end
    end
    s1_req_phys <= _mshrs_io_replay_valid | _prober_io_meta_read_valid | _wb_io_meta_read_valid | (io_cpu_req_valid ? io_cpu_req_bits_phys : s1_req_phys);	// @[NBDcache.scala:710:18, :711:22, :712:21, :716:19, :759:27, :760:12, :762:32, :764:17, :766:36, :768:17, :770:32, :771:12]
    s1_clk_en <= _metaReadArb_io_out_valid;	// @[NBDcache.scala:719:22, :794:27]
    if (s1_clk_en) begin	// @[NBDcache.scala:719:22]
      s2_req_addr <= {8'h0, _dtlb_io_resp_paddr};	// @[NBDcache.scala:723:19, :739:20, :782:17]
      s2_req_tag <= s1_req_tag;	// @[NBDcache.scala:716:19, :723:19]
      s2_req_cmd <= s1_req_cmd;	// @[NBDcache.scala:716:19, :723:19]
      s2_req_size <= s1_req_size;	// @[NBDcache.scala:716:19, :723:19]
      s2_req_signed <= s1_req_signed;	// @[NBDcache.scala:716:19, :723:19]
      s2_req_phys <= s1_req_phys;	// @[NBDcache.scala:716:19, :723:19]
      s2_tag_match_way <= {_s1_tag_eq_way_WIRE_3 & (|_meta_io_resp_3_coh_state), _s1_tag_eq_way_WIRE_2 & (|_meta_io_resp_2_coh_state), _s1_tag_eq_way_WIRE_1 & (|_meta_io_resp_1_coh_state), _s1_tag_eq_way_WIRE_0 & (|_meta_io_resp_0_coh_state)};	// @[Metadata.scala:50:45, NBDcache.scala:793:20, :833:62, :834:{62,96}, Reg.scala:19:16]
      s2_hit_state_r_state <= _meta_io_resp_0_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_hit_state_r_1_state <= _meta_io_resp_1_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_hit_state_r_2_state <= _meta_io_resp_2_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_hit_state_r_3_state <= _meta_io_resp_3_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_replaced_way_en_r <= {_lfsr_prng_io_out_1, _lfsr_prng_io_out_0};	// @[PRNG.scala:91:22, Reg.scala:19:16, package.scala:155:13]
      s2_store_bypass <= _T_242;	// @[NBDcache.scala:968:28, :971:38]
      io_cpu_s2_xcpt_r_pf_ld <= _dtlb_io_resp_pf_ld;	// @[NBDcache.scala:739:20, Reg.scala:19:16]
      io_cpu_s2_xcpt_r_pf_st <= _dtlb_io_resp_pf_st;	// @[NBDcache.scala:739:20, Reg.scala:19:16]
      io_cpu_s2_xcpt_r_ae_ld <= _dtlb_io_resp_ae_ld;	// @[NBDcache.scala:739:20, Reg.scala:19:16]
      io_cpu_s2_xcpt_r_ae_st <= _dtlb_io_resp_ae_st;	// @[NBDcache.scala:739:20, Reg.scala:19:16]
      io_cpu_s2_xcpt_r_ma_ld <= _dtlb_io_resp_ma_ld;	// @[NBDcache.scala:739:20, Reg.scala:19:16]
      io_cpu_s2_xcpt_r_ma_st <= _dtlb_io_resp_ma_st;	// @[NBDcache.scala:739:20, Reg.scala:19:16]
    end
    if (s1_clk_en & s1_write) begin	// @[Consts.scala:86:76, NBDcache.scala:719:22, :723:19, :778:20, :783:21, :784:19, :786:24]
      if (s1_replay)	// @[NBDcache.scala:718:26]
        s2_req_data <= _mshrs_io_replay_bits_data;	// @[NBDcache.scala:712:21, :723:19]
      else	// @[NBDcache.scala:718:26]
        s2_req_data <= io_cpu_s1_data_data;	// @[NBDcache.scala:723:19]
    end
    if ((s2_valid | cache_resp_bits_replay) & (_T_161 | _T_162 | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18)) begin	// @[Consts.scala:86:{32,49,66,76}, NBDcache.scala:722:66, :724:47, :884:{19,33}, package.scala:16:47]
      s3_req_addr <= s2_req_addr;	// @[NBDcache.scala:723:19, :729:19]
      s3_req_cmd <= s2_req_cmd;	// @[NBDcache.scala:723:19, :729:19]
      s3_req_data <= _amoalu_io_out;	// @[NBDcache.scala:729:19, :883:22]
      s3_way <= s2_tag_match_way;	// @[NBDcache.scala:730:19, Reg.scala:19:16]
    end
    if (_T_74 & s2_lr)	// @[Consts.scala:87:71, NBDcache.scala:846:22, :851:{35,49}, :852:18, :854:17]
      lrsc_addr <= s2_req_addr[39:6];	// @[NBDcache.scala:723:19, :824:48, :846:22]
    if (s1_clk_en & _s1_tag_eq_way_WIRE_0)	// @[NBDcache.scala:719:22, :833:62, :867:25]
      regs_0 <= _data_io_resp_0;	// @[NBDcache.scala:800:20, :866:19]
    if (s1_clk_en & _s1_tag_eq_way_WIRE_1)	// @[NBDcache.scala:719:22, :833:62, :867:25]
      regs_1_0 <= _data_io_resp_1;	// @[NBDcache.scala:800:20, :866:19]
    if (s1_clk_en & _s1_tag_eq_way_WIRE_2)	// @[NBDcache.scala:719:22, :833:62, :867:25]
      regs_2_0 <= _data_io_resp_2;	// @[NBDcache.scala:800:20, :866:19]
    if (s1_clk_en & _s1_tag_eq_way_WIRE_3)	// @[NBDcache.scala:719:22, :833:62, :867:25]
      regs_3_0 <= _data_io_resp_3;	// @[NBDcache.scala:800:20, :866:19]
    if (s1_clk_en & _GEN_2 == 2'h0) begin	// @[NBDcache.scala:719:22, :900:{104,125}, OneHot.scala:57:35]
      s2_repl_meta_r_coh_state <= _meta_io_resp_0_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_repl_meta_r_tag <= _meta_io_resp_0_tag;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
    end
    if (s1_clk_en & _GEN_2 == 2'h1) begin	// @[Cat.scala:33:92, NBDcache.scala:719:22, :900:{104,125}, OneHot.scala:57:35]
      s2_repl_meta_r_1_coh_state <= _meta_io_resp_1_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_repl_meta_r_1_tag <= _meta_io_resp_1_tag;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
    end
    if (s1_clk_en & _GEN_2 == 2'h2) begin	// @[NBDcache.scala:719:22, :900:{104,125}, OneHot.scala:57:35]
      s2_repl_meta_r_2_coh_state <= _meta_io_resp_2_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_repl_meta_r_2_tag <= _meta_io_resp_2_tag;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
    end
    if (s1_clk_en & (&_GEN_2)) begin	// @[NBDcache.scala:719:22, :900:{104,125}, OneHot.scala:57:35]
      s2_repl_meta_r_3_coh_state <= _meta_io_resp_3_coh_state;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
      s2_repl_meta_r_3_tag <= _meta_io_resp_3_tag;	// @[NBDcache.scala:793:20, Reg.scala:19:16]
    end
    if (s3_valid & _metaReadArb_io_out_valid) begin	// @[NBDcache.scala:728:25, :794:27, :961:43]
      s4_req_addr <= s3_req_addr;	// @[NBDcache.scala:729:19, Reg.scala:19:16]
      s4_req_cmd <= s3_req_cmd;	// @[NBDcache.scala:729:19, Reg.scala:19:16]
      s4_req_data <= s3_req_data;	// @[NBDcache.scala:729:19, Reg.scala:19:16]
    end
    if (s1_clk_en & _T_242) begin	// @[NBDcache.scala:719:22, :967:33, :969:20, :971:{38,44}, :972:28]
      if (_T_184)	// @[NBDcache.scala:966:77]
        s2_store_bypass_data <= _amoalu_io_out;	// @[NBDcache.scala:883:22, :967:33]
      else if (_T_212)	// @[NBDcache.scala:966:77]
        s2_store_bypass_data <= s3_req_data;	// @[NBDcache.scala:729:19, :967:33]
      else	// @[NBDcache.scala:966:77]
        s2_store_bypass_data <= s4_req_data;	// @[NBDcache.scala:967:33, Reg.scala:19:16]
    end
    if (_mshrs_io_resp_ready_T)	// @[NBDcache.scala:990:49]
      s2_nack_hit <= s1_nack;	// @[NBDcache.scala:988:74, Reg.scala:19:16]
    mshrs_io_resp_ready_REG <= ~_mshrs_io_resp_ready_T;	// @[NBDcache.scala:990:49, :1030:{33,34}]
    io_cpu_s2_xcpt_REG <= _dtlb_io_req_valid_T_2 & ~s1_nack;	// @[NBDcache.scala:742:52, :988:74, :1039:{41,44}, :1041:32]
    io_cpu_s2_xcpt_r_gf_ld <= ~s1_clk_en & io_cpu_s2_xcpt_r_gf_ld;	// @[NBDcache.scala:719:22, Reg.scala:19:16, :20:{18,22}]
    io_cpu_s2_xcpt_r_gf_st <= ~s1_clk_en & io_cpu_s2_xcpt_r_gf_st;	// @[NBDcache.scala:719:22, Reg.scala:19:16, :20:{18,22}]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[NBDcache.scala:737:9]
      if (~reset & ~(~s1_valid | ~_T_1)) begin	// @[Consts.scala:86:49, NBDcache.scala:715:25, :737:{9,10,20,23}]
        if (`ASSERT_VERBOSE_COND_)	// @[NBDcache.scala:737:9]
          $error("Assertion failed\n    at NBDcache.scala:737 assert(!s1_valid || !s1_req.cmd.isOneOf(M_PWR))\n");	// @[NBDcache.scala:737:9]
        if (`STOP_COND_)	// @[NBDcache.scala:737:9]
          $fatal;	// @[NBDcache.scala:737:9]
      end
      if (~reset & ~(~_wb_io_release_valid | ~earlyWinner_1)) begin	// @[Arbiter.scala:98:79, :106:{13,61,64,67}, NBDcache.scala:710:18]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:106:13]
          $error("Assertion failed\n    at Arbiter.scala:106 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:106:13]
        if (`STOP_COND_)	// @[Arbiter.scala:106:13]
          $fatal;	// @[Arbiter.scala:106:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T | _wb_io_release_valid | earlyWinner_1)) begin	// @[Arbiter.scala:98:79, :108:{14,15,36,41}, NBDcache.scala:710:18]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:108:14]
          $error("Assertion failed\n    at Arbiter.scala:108 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:108:14]
        if (`STOP_COND_)	// @[Arbiter.scala:108:14]
          $fatal;	// @[Arbiter.scala:108:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        s1_valid = _RANDOM_0[0];	// @[NBDcache.scala:715:25]
        s1_req_addr = {_RANDOM_0[31:1], _RANDOM_1[8:0]};	// @[NBDcache.scala:715:25, :716:19]
        s1_req_tag = _RANDOM_1[15:9];	// @[NBDcache.scala:716:19]
        s1_req_cmd = _RANDOM_1[20:16];	// @[NBDcache.scala:716:19]
        s1_req_size = _RANDOM_1[22:21];	// @[NBDcache.scala:716:19]
        s1_req_signed = _RANDOM_1[23];	// @[NBDcache.scala:716:19]
        s1_req_dprv = _RANDOM_1[25:24];	// @[NBDcache.scala:716:19]
        s1_req_phys = _RANDOM_1[27];	// @[NBDcache.scala:716:19]
        s1_replay = _RANDOM_4[6];	// @[NBDcache.scala:718:26]
        s1_clk_en = _RANDOM_4[7];	// @[NBDcache.scala:718:26, :719:22]
        s2_valid_REG = _RANDOM_4[8];	// @[NBDcache.scala:718:26, :722:25]
        s2_req_addr = {_RANDOM_4[31:9], _RANDOM_5[16:0]};	// @[NBDcache.scala:718:26, :723:19]
        s2_req_tag = _RANDOM_5[23:17];	// @[NBDcache.scala:723:19]
        s2_req_cmd = _RANDOM_5[28:24];	// @[NBDcache.scala:723:19]
        s2_req_size = _RANDOM_5[30:29];	// @[NBDcache.scala:723:19]
        s2_req_signed = _RANDOM_5[31];	// @[NBDcache.scala:723:19]
        s2_req_phys = _RANDOM_6[3];	// @[NBDcache.scala:723:19]
        s2_req_data = {_RANDOM_6[31:6], _RANDOM_7, _RANDOM_8[5:0]};	// @[NBDcache.scala:723:19]
        s2_replay_REG = _RANDOM_8[14];	// @[NBDcache.scala:723:19, :724:26]
        s3_valid = _RANDOM_8[15];	// @[NBDcache.scala:723:19, :728:25]
        s3_req_addr = {_RANDOM_8[31:16], _RANDOM_9[23:0]};	// @[NBDcache.scala:723:19, :729:19]
        s3_req_cmd = {_RANDOM_9[31], _RANDOM_10[3:0]};	// @[NBDcache.scala:729:19]
        s3_req_data = {_RANDOM_10[31:13], _RANDOM_11, _RANDOM_12[12:0]};	// @[NBDcache.scala:729:19]
        s3_way = _RANDOM_12[24:21];	// @[NBDcache.scala:729:19, :730:19]
        s2_tag_match_way = _RANDOM_12[29:26];	// @[NBDcache.scala:729:19, Reg.scala:19:16]
        s2_hit_state_r_state = _RANDOM_12[31:30];	// @[NBDcache.scala:729:19, Reg.scala:19:16]
        s2_hit_state_r_1_state = _RANDOM_13[1:0];	// @[Reg.scala:19:16]
        s2_hit_state_r_2_state = _RANDOM_13[3:2];	// @[Reg.scala:19:16]
        s2_hit_state_r_3_state = _RANDOM_13[5:4];	// @[Reg.scala:19:16]
        lrsc_count = _RANDOM_13[12:6];	// @[NBDcache.scala:844:27, Reg.scala:19:16]
        lrsc_addr = {_RANDOM_13[31:13], _RANDOM_14[14:0]};	// @[NBDcache.scala:846:22, Reg.scala:19:16]
        regs_0 = {_RANDOM_14[31:15], _RANDOM_15, _RANDOM_16[14:0]};	// @[NBDcache.scala:846:22, :866:19]
        regs_1_0 = {_RANDOM_16[31:15], _RANDOM_17, _RANDOM_18[14:0]};	// @[NBDcache.scala:866:19]
        regs_2_0 = {_RANDOM_18[31:15], _RANDOM_19, _RANDOM_20[14:0]};	// @[NBDcache.scala:866:19]
        regs_3_0 = {_RANDOM_20[31:15], _RANDOM_21, _RANDOM_22[14:0]};	// @[NBDcache.scala:866:19]
        s2_replaced_way_en_r = _RANDOM_22[16:15];	// @[NBDcache.scala:866:19, Reg.scala:19:16]
        s2_repl_meta_r_coh_state = _RANDOM_22[18:17];	// @[NBDcache.scala:866:19, Reg.scala:19:16]
        s2_repl_meta_r_tag = {_RANDOM_22[31:19], _RANDOM_23[8:0]};	// @[NBDcache.scala:866:19, Reg.scala:19:16]
        s2_repl_meta_r_1_coh_state = _RANDOM_23[10:9];	// @[Reg.scala:19:16]
        s2_repl_meta_r_1_tag = {_RANDOM_23[31:11], _RANDOM_24[0]};	// @[Reg.scala:19:16]
        s2_repl_meta_r_2_coh_state = _RANDOM_24[2:1];	// @[Reg.scala:19:16]
        s2_repl_meta_r_2_tag = _RANDOM_24[24:3];	// @[Reg.scala:19:16]
        s2_repl_meta_r_3_coh_state = _RANDOM_24[26:25];	// @[Reg.scala:19:16]
        s2_repl_meta_r_3_tag = {_RANDOM_24[31:27], _RANDOM_25[16:0]};	// @[Reg.scala:19:16]
        beatsLeft = _RANDOM_25[25:17];	// @[Arbiter.scala:88:30, Reg.scala:19:16]
        state_0 = _RANDOM_25[26];	// @[Arbiter.scala:117:26, Reg.scala:19:16]
        state_1 = _RANDOM_25[27];	// @[Arbiter.scala:117:26, Reg.scala:19:16]
        s4_valid = _RANDOM_25[28];	// @[NBDcache.scala:960:25, Reg.scala:19:16]
        s4_req_addr = {_RANDOM_25[31:29], _RANDOM_26, _RANDOM_27[4:0]};	// @[Reg.scala:19:16]
        s4_req_cmd = _RANDOM_27[16:12];	// @[Reg.scala:19:16]
        s4_req_data = {_RANDOM_27[31:26], _RANDOM_28, _RANDOM_29[25:0]};	// @[Reg.scala:19:16]
        s2_store_bypass_data = {_RANDOM_30[31:2], _RANDOM_31, _RANDOM_32[1:0]};	// @[NBDcache.scala:967:33]
        s2_store_bypass = _RANDOM_32[2];	// @[NBDcache.scala:967:33, :968:28]
        s2_nack_hit = _RANDOM_32[3];	// @[NBDcache.scala:967:33, Reg.scala:19:16]
        block_miss = _RANDOM_32[5];	// @[NBDcache.scala:967:33, :1003:27]
        mshrs_io_resp_ready_REG = _RANDOM_32[6];	// @[NBDcache.scala:967:33, :1030:33]
        io_cpu_s2_xcpt_REG = _RANDOM_32[7];	// @[NBDcache.scala:967:33, :1041:32]
        io_cpu_s2_xcpt_r_pf_ld = _RANDOM_34[18];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_pf_st = _RANDOM_34[19];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_gf_ld = _RANDOM_34[21];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_gf_st = _RANDOM_34[22];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_ae_ld = _RANDOM_34[24];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_ae_st = _RANDOM_34[25];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_ma_ld = _RANDOM_34[27];	// @[Reg.scala:19:16]
        io_cpu_s2_xcpt_r_ma_st = _RANDOM_34[28];	// @[Reg.scala:19:16]
        io_cpu_perf_acquire_counter = _RANDOM_35[9:1];	// @[Edges.scala:229:27]
        io_cpu_perf_release_counter = _RANDOM_35[18:10];	// @[Edges.scala:229:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  WritebackUnit wb (	// @[NBDcache.scala:710:18]
    .clock                   (clock),
    .reset                   (reset),
    .io_req_valid            (_wbArb_io_out_valid),	// @[NBDcache.scala:950:21]
    .io_req_bits_tag         (_wbArb_io_out_bits_tag),	// @[NBDcache.scala:950:21]
    .io_req_bits_idx         (_wbArb_io_out_bits_idx),	// @[NBDcache.scala:950:21]
    .io_req_bits_source      (_wbArb_io_out_bits_source),	// @[NBDcache.scala:950:21]
    .io_req_bits_param       (_wbArb_io_out_bits_param),	// @[NBDcache.scala:950:21]
    .io_req_bits_way_en      (_wbArb_io_out_bits_way_en),	// @[NBDcache.scala:950:21]
    .io_req_bits_voluntary   (_wbArb_io_out_bits_voluntary),	// @[NBDcache.scala:950:21]
    .io_meta_read_ready      (_metaReadArb_io_in_3_ready),	// @[NBDcache.scala:794:27]
    .io_data_req_ready       (_readArb_io_in_2_ready),	// @[NBDcache.scala:801:23]
    .io_data_resp            (s2_data_muxed),	// @[Mux.scala:27:73]
    .io_release_ready        (auto_out_c_ready & (idle | state_0)),	// @[Arbiter.scala:89:28, :117:26, :122:24, :124:31]
    .io_req_ready            (_wb_io_req_ready),
    .io_meta_read_valid      (_wb_io_meta_read_valid),
    .io_meta_read_bits_idx   (_wb_io_meta_read_bits_idx),
    .io_meta_read_bits_tag   (_wb_io_meta_read_bits_tag),
    .io_data_req_valid       (_wb_io_data_req_valid),
    .io_data_req_bits_way_en (_wb_io_data_req_bits_way_en),
    .io_data_req_bits_addr   (_wb_io_data_req_bits_addr),
    .io_release_valid        (_wb_io_release_valid),
    .io_release_bits_opcode  (_wb_io_release_bits_opcode),
    .io_release_bits_param   (_wb_io_release_bits_param),
    .io_release_bits_source  (_wb_io_release_bits_source),
    .io_release_bits_address (_wb_io_release_bits_address),
    .io_release_bits_data    (_wb_io_release_bits_data)
  );
  ProbeUnit prober (	// @[NBDcache.scala:711:22]
    .clock                             (clock),
    .reset                             (reset),
    .io_req_valid                      (auto_out_b_valid & ~(|(lrsc_count[6:2]))),	// @[NBDcache.scala:844:27, :845:31, :922:{41,44}]
    .io_req_bits_param                 (auto_out_b_bits_param),
    .io_req_bits_size                  (auto_out_b_bits_size),
    .io_req_bits_source                (auto_out_b_bits_source),
    .io_req_bits_address               (auto_out_b_bits_address),
    .io_rep_ready                      (auto_out_c_ready & (idle ? ~_wb_io_release_valid : state_1)),	// @[Arbiter.scala:17:61, :89:28, :117:26, :122:24, :124:31, NBDcache.scala:710:18]
    .io_meta_read_ready                (_metaReadArb_io_in_2_ready),	// @[NBDcache.scala:794:27]
    .io_meta_write_ready               (_metaWriteArb_io_in_1_ready),	// @[NBDcache.scala:795:28]
    .io_wb_req_ready                   (_wbArb_io_in_0_ready),	// @[NBDcache.scala:950:21]
    .io_way_en                         (s2_tag_match_way),	// @[Reg.scala:19:16]
    .io_mshr_rdy                       (_mshrs_io_probe_rdy),	// @[NBDcache.scala:712:21]
    .io_block_state_state              (mshrs_io_req_bits_old_meta_meta_coh_state),	// @[Mux.scala:27:73]
    .io_req_ready                      (_prober_io_req_ready),
    .io_rep_valid                      (_prober_io_rep_valid),
    .io_rep_bits_param                 (_prober_io_rep_bits_param),
    .io_rep_bits_size                  (_prober_io_rep_bits_size),
    .io_rep_bits_source                (_prober_io_rep_bits_source),
    .io_rep_bits_address               (_prober_io_rep_bits_address),
    .io_meta_read_valid                (_prober_io_meta_read_valid),
    .io_meta_read_bits_idx             (_prober_io_meta_read_bits_idx),
    .io_meta_read_bits_tag             (_prober_io_meta_read_bits_tag),
    .io_meta_write_valid               (_prober_io_meta_write_valid),
    .io_meta_write_bits_idx            (_prober_io_meta_write_bits_idx),
    .io_meta_write_bits_way_en         (_prober_io_meta_write_bits_way_en),
    .io_meta_write_bits_data_coh_state (_prober_io_meta_write_bits_data_coh_state),
    .io_meta_write_bits_data_tag       (_prober_io_meta_write_bits_data_tag),
    .io_wb_req_valid                   (_prober_io_wb_req_valid),
    .io_wb_req_bits_tag                (_prober_io_wb_req_bits_tag),
    .io_wb_req_bits_idx                (_prober_io_wb_req_bits_idx),
    .io_wb_req_bits_source             (_prober_io_wb_req_bits_source),
    .io_wb_req_bits_param              (_prober_io_wb_req_bits_param),
    .io_wb_req_bits_way_en             (_prober_io_wb_req_bits_way_en)
  );
  MSHRFile mshrs (	// @[NBDcache.scala:712:21]
    .clock                             (clock),
    .reset                             (reset),
    .io_req_valid                      (_GEN),	// @[NBDcache.scala:903:22, :991:{22,43}]
    .io_req_bits_addr                  (s2_req_addr),	// @[NBDcache.scala:723:19]
    .io_req_bits_tag                   (s2_req_tag),	// @[NBDcache.scala:723:19]
    .io_req_bits_cmd                   (s2_req_cmd),	// @[NBDcache.scala:723:19]
    .io_req_bits_size                  (s2_req_size),	// @[NBDcache.scala:723:19]
    .io_req_bits_signed                (s2_req_signed),	// @[NBDcache.scala:723:19]
    .io_req_bits_dprv                  (2'h0),
    .io_req_bits_dv                    (1'h0),
    .io_req_bits_phys                  (s2_req_phys),	// @[NBDcache.scala:723:19]
    .io_req_bits_no_alloc              (1'h0),
    .io_req_bits_no_xcpt               (1'h0),
    .io_req_bits_data                  (s2_req_data),	// @[NBDcache.scala:723:19]
    .io_req_bits_mask                  (8'h0),
    .io_req_bits_tag_match             (|s2_tag_match_way),	// @[NBDcache.scala:838:39, Reg.scala:19:16]
    .io_req_bits_old_meta_coh_state    ((|s2_tag_match_way) ? mshrs_io_req_bits_old_meta_meta_coh_state : (_s2_repl_meta_T_8 ? s2_repl_meta_r_coh_state : 2'h0) | (_s2_repl_meta_T_9 ? s2_repl_meta_r_1_coh_state : 2'h0) | (_s2_repl_meta_T_10 ? s2_repl_meta_r_2_coh_state : 2'h0) | ((&s2_replaced_way_en_r) ? s2_repl_meta_r_3_coh_state : 2'h0)),	// @[Mux.scala:27:73, :29:36, NBDcache.scala:838:39, :906:36, Reg.scala:19:16]
    .io_req_bits_old_meta_tag          ((_s2_repl_meta_T_8 ? s2_repl_meta_r_tag : 22'h0) | (_s2_repl_meta_T_9 ? s2_repl_meta_r_1_tag : 22'h0) | (_s2_repl_meta_T_10 ? s2_repl_meta_r_2_tag : 22'h0) | ((&s2_replaced_way_en_r) ? s2_repl_meta_r_3_tag : 22'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_req_bits_way_en                ((|s2_tag_match_way) ? s2_tag_match_way : 4'h1 << s2_replaced_way_en_r),	// @[Cat.scala:33:92, NBDcache.scala:838:39, :907:34, OneHot.scala:57:35, Reg.scala:19:16]
    .io_resp_ready                     (mshrs_io_resp_ready_REG),	// @[NBDcache.scala:1030:33]
    .io_mem_acquire_ready              (auto_out_a_ready),
    .io_mem_grant_valid                (tl_out_d_ready & auto_out_d_valid),	// @[Decoupled.scala:51:35, NBDcache.scala:935:45]
    .io_mem_grant_bits_opcode          (auto_out_d_bits_opcode),
    .io_mem_grant_bits_param           (auto_out_d_bits_param),
    .io_mem_grant_bits_size            (auto_out_d_bits_size),
    .io_mem_grant_bits_source          (auto_out_d_bits_source),
    .io_mem_grant_bits_sink            (auto_out_d_bits_sink),
    .io_mem_grant_bits_data            (auto_out_d_bits_data),
    .io_mem_finish_ready               (auto_out_e_ready),
    .io_meta_read_ready                (_metaReadArb_io_in_1_ready),	// @[NBDcache.scala:794:27]
    .io_meta_write_ready               (_metaWriteArb_io_in_0_ready),	// @[NBDcache.scala:795:28]
    .io_replay_ready                   (_readArb_io_in_1_ready),	// @[NBDcache.scala:801:23]
    .io_wb_req_ready                   (_wbArb_io_in_1_ready),	// @[NBDcache.scala:950:21]
    .io_req_ready                      (_mshrs_io_req_ready),
    .io_resp_valid                     (_mshrs_io_resp_valid),
    .io_resp_bits_addr                 (_mshrs_io_resp_bits_addr),
    .io_resp_bits_tag                  (_mshrs_io_resp_bits_tag),
    .io_resp_bits_cmd                  (_mshrs_io_resp_bits_cmd),
    .io_resp_bits_size                 (_mshrs_io_resp_bits_size),
    .io_resp_bits_signed               (_mshrs_io_resp_bits_signed),
    .io_resp_bits_dprv                 (_mshrs_io_resp_bits_dprv),
    .io_resp_bits_dv                   (_mshrs_io_resp_bits_dv),
    .io_resp_bits_data                 (_mshrs_io_resp_bits_data),
    .io_resp_bits_mask                 (_mshrs_io_resp_bits_mask),
    .io_resp_bits_has_data             (_mshrs_io_resp_bits_has_data),
    .io_resp_bits_store_data           (_mshrs_io_resp_bits_store_data),
    .io_secondary_miss                 (_mshrs_io_secondary_miss),
    .io_mem_acquire_valid              (_mshrs_io_mem_acquire_valid),
    .io_mem_acquire_bits_opcode        (_mshrs_io_mem_acquire_bits_opcode),
    .io_mem_acquire_bits_param         (auto_out_a_bits_param),
    .io_mem_acquire_bits_size          (_mshrs_io_mem_acquire_bits_size),
    .io_mem_acquire_bits_source        (auto_out_a_bits_source),
    .io_mem_acquire_bits_address       (auto_out_a_bits_address),
    .io_mem_acquire_bits_mask          (auto_out_a_bits_mask),
    .io_mem_acquire_bits_data          (auto_out_a_bits_data),
    .io_mem_finish_valid               (auto_out_e_valid),
    .io_mem_finish_bits_sink           (auto_out_e_bits_sink),
    .io_refill_way_en                  (_mshrs_io_refill_way_en),
    .io_refill_addr                    (_mshrs_io_refill_addr),
    .io_meta_read_valid                (_mshrs_io_meta_read_valid),
    .io_meta_read_bits_idx             (_mshrs_io_meta_read_bits_idx),
    .io_meta_write_valid               (_mshrs_io_meta_write_valid),
    .io_meta_write_bits_idx            (_mshrs_io_meta_write_bits_idx),
    .io_meta_write_bits_way_en         (_mshrs_io_meta_write_bits_way_en),
    .io_meta_write_bits_data_coh_state (_mshrs_io_meta_write_bits_data_coh_state),
    .io_meta_write_bits_data_tag       (_mshrs_io_meta_write_bits_data_tag),
    .io_replay_valid                   (_mshrs_io_replay_valid),
    .io_replay_bits_addr               (_mshrs_io_replay_bits_addr),
    .io_replay_bits_tag                (_mshrs_io_replay_bits_tag),
    .io_replay_bits_cmd                (_mshrs_io_replay_bits_cmd),
    .io_replay_bits_size               (_mshrs_io_replay_bits_size),
    .io_replay_bits_signed             (_mshrs_io_replay_bits_signed),
    .io_replay_bits_dprv               (_mshrs_io_replay_bits_dprv),
    .io_replay_bits_data               (_mshrs_io_replay_bits_data),
    .io_wb_req_valid                   (_mshrs_io_wb_req_valid),
    .io_wb_req_bits_tag                (_mshrs_io_wb_req_bits_tag),
    .io_wb_req_bits_idx                (_mshrs_io_wb_req_bits_idx),
    .io_wb_req_bits_source             (_mshrs_io_wb_req_bits_source),
    .io_wb_req_bits_param              (_mshrs_io_wb_req_bits_param),
    .io_wb_req_bits_way_en             (_mshrs_io_wb_req_bits_way_en),
    .io_probe_rdy                      (_mshrs_io_probe_rdy),
    .io_fence_rdy                      (_mshrs_io_fence_rdy),
    .io_replay_next                    (_mshrs_io_replay_next)
  );
  TLB dtlb (	// @[NBDcache.scala:739:20]
    .clock                         (clock),
    .reset                         (reset),
    .io_req_valid                  (_dtlb_io_req_valid_T_2),	// @[NBDcache.scala:742:52]
    .io_req_bits_vaddr             (s1_req_addr),	// @[NBDcache.scala:716:19]
    .io_req_bits_passthrough       (s1_req_phys),	// @[NBDcache.scala:716:19]
    .io_req_bits_size              (s1_req_size),	// @[NBDcache.scala:716:19]
    .io_req_bits_cmd               (s1_req_cmd),	// @[NBDcache.scala:716:19]
    .io_req_bits_prv               (s1_req_dprv),	// @[NBDcache.scala:716:19]
    .io_sfence_valid               (s1_valid & ~io_cpu_s1_kill & s1_sfence),	// @[NBDcache.scala:715:25, :717:37, :720:30, :751:55]
    .io_sfence_bits_rs1            (s1_req_size[0]),	// @[NBDcache.scala:716:19, :752:41]
    .io_sfence_bits_rs2            (s1_req_size[1]),	// @[NBDcache.scala:716:19, :753:41]
    .io_sfence_bits_addr           (s1_req_addr[38:0]),	// @[NBDcache.scala:716:19, :754:28]
    .io_ptw_req_ready              (io_ptw_req_ready),
    .io_ptw_resp_valid             (io_ptw_resp_valid),
    .io_ptw_resp_bits_ae_ptw       (io_ptw_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final     (io_ptw_resp_bits_ae_final),
    .io_ptw_resp_bits_pf           (io_ptw_resp_bits_pf),
    .io_ptw_resp_bits_gf           (io_ptw_resp_bits_gf),
    .io_ptw_resp_bits_hr           (io_ptw_resp_bits_hr),
    .io_ptw_resp_bits_hw           (io_ptw_resp_bits_hw),
    .io_ptw_resp_bits_hx           (io_ptw_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn      (io_ptw_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d        (io_ptw_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a        (io_ptw_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g        (io_ptw_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u        (io_ptw_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x        (io_ptw_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w        (io_ptw_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r        (io_ptw_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v        (io_ptw_resp_bits_pte_v),
    .io_ptw_resp_bits_level        (io_ptw_resp_bits_level),
    .io_ptw_resp_bits_homogeneous  (io_ptw_resp_bits_homogeneous),
    .io_ptw_ptbr_mode              (io_ptw_ptbr_mode),
    .io_ptw_status_debug           (io_ptw_status_debug),
    .io_ptw_status_mxr             (io_ptw_status_mxr),
    .io_ptw_status_sum             (io_ptw_status_sum),
    .io_ptw_pmp_0_cfg_l            (io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a            (io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x            (io_ptw_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w            (io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r            (io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr             (io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask             (io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l            (io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a            (io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x            (io_ptw_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w            (io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r            (io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr             (io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask             (io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l            (io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a            (io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x            (io_ptw_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w            (io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r            (io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr             (io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask             (io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l            (io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a            (io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x            (io_ptw_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w            (io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r            (io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr             (io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask             (io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l            (io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a            (io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x            (io_ptw_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w            (io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r            (io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr             (io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask             (io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l            (io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a            (io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x            (io_ptw_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w            (io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r            (io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr             (io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask             (io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l            (io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a            (io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x            (io_ptw_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w            (io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r            (io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr             (io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask             (io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l            (io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a            (io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x            (io_ptw_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w            (io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r            (io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr             (io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask             (io_ptw_pmp_7_mask),
    .io_req_ready                  (_dtlb_io_req_ready),
    .io_resp_miss                  (_dtlb_io_resp_miss),
    .io_resp_paddr                 (_dtlb_io_resp_paddr),
    .io_resp_pf_ld                 (_dtlb_io_resp_pf_ld),
    .io_resp_pf_st                 (_dtlb_io_resp_pf_st),
    .io_resp_ae_ld                 (_dtlb_io_resp_ae_ld),
    .io_resp_ae_st                 (_dtlb_io_resp_ae_st),
    .io_resp_ma_ld                 (_dtlb_io_resp_ma_ld),
    .io_resp_ma_st                 (_dtlb_io_resp_ma_st),
    .io_ptw_req_valid              (_dtlb_io_ptw_req_valid),
    .io_ptw_req_bits_bits_addr     (io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa (io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1  (io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2   (io_ptw_req_bits_bits_stage2)
  );
  L1MetadataArray meta (	// @[NBDcache.scala:793:20]
    .clock                        (clock),
    .reset                        (reset),
    .io_read_valid                (_metaReadArb_io_out_valid),	// @[NBDcache.scala:794:27]
    .io_read_bits_idx             (_metaReadArb_io_out_bits_idx),	// @[NBDcache.scala:794:27]
    .io_write_valid               (_metaWriteArb_io_out_valid),	// @[NBDcache.scala:795:28]
    .io_write_bits_idx            (_metaWriteArb_io_out_bits_idx),	// @[NBDcache.scala:795:28]
    .io_write_bits_way_en         (_metaWriteArb_io_out_bits_way_en),	// @[NBDcache.scala:795:28]
    .io_write_bits_data_coh_state (_metaWriteArb_io_out_bits_data_coh_state),	// @[NBDcache.scala:795:28]
    .io_write_bits_data_tag       (_metaWriteArb_io_out_bits_data_tag),	// @[NBDcache.scala:795:28]
    .io_read_ready                (_meta_io_read_ready),
    .io_write_ready               (_meta_io_write_ready),
    .io_resp_0_coh_state          (_meta_io_resp_0_coh_state),
    .io_resp_0_tag                (_meta_io_resp_0_tag),
    .io_resp_1_coh_state          (_meta_io_resp_1_coh_state),
    .io_resp_1_tag                (_meta_io_resp_1_tag),
    .io_resp_2_coh_state          (_meta_io_resp_2_coh_state),
    .io_resp_2_tag                (_meta_io_resp_2_tag),
    .io_resp_3_coh_state          (_meta_io_resp_3_coh_state),
    .io_resp_3_tag                (_meta_io_resp_3_tag)
  );
  Arbiter_7 metaReadArb (	// @[NBDcache.scala:794:27]
    .io_in_1_valid    (_mshrs_io_meta_read_valid),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_idx (_mshrs_io_meta_read_bits_idx),	// @[NBDcache.scala:712:21]
    .io_in_2_valid    (_prober_io_meta_read_valid),	// @[NBDcache.scala:711:22]
    .io_in_2_bits_idx (_prober_io_meta_read_bits_idx),	// @[NBDcache.scala:711:22]
    .io_in_3_valid    (_wb_io_meta_read_valid),	// @[NBDcache.scala:710:18]
    .io_in_3_bits_idx (_wb_io_meta_read_bits_idx),	// @[NBDcache.scala:710:18]
    .io_in_4_valid    (io_cpu_req_valid),
    .io_in_4_bits_idx (io_cpu_req_bits_addr[9:6]),	// @[NBDcache.scala:811:{33,57}]
    .io_out_ready     (_meta_io_read_ready),	// @[NBDcache.scala:793:20]
    .io_in_1_ready    (_metaReadArb_io_in_1_ready),
    .io_in_2_ready    (_metaReadArb_io_in_2_ready),
    .io_in_3_ready    (_metaReadArb_io_in_3_ready),
    .io_in_4_ready    (_metaReadArb_io_in_4_ready),
    .io_out_valid     (_metaReadArb_io_out_valid),
    .io_out_bits_idx  (_metaReadArb_io_out_bits_idx)
  );
  Arbiter_8 metaWriteArb (	// @[NBDcache.scala:795:28]
    .io_in_0_valid               (_mshrs_io_meta_write_valid),	// @[NBDcache.scala:712:21]
    .io_in_0_bits_idx            (_mshrs_io_meta_write_bits_idx),	// @[NBDcache.scala:712:21]
    .io_in_0_bits_way_en         (_mshrs_io_meta_write_bits_way_en),	// @[NBDcache.scala:712:21]
    .io_in_0_bits_data_coh_state (_mshrs_io_meta_write_bits_data_coh_state),	// @[NBDcache.scala:712:21]
    .io_in_0_bits_data_tag       (_mshrs_io_meta_write_bits_data_tag),	// @[NBDcache.scala:712:21]
    .io_in_1_valid               (_prober_io_meta_write_valid),	// @[NBDcache.scala:711:22]
    .io_in_1_bits_idx            (_prober_io_meta_write_bits_idx),	// @[NBDcache.scala:711:22]
    .io_in_1_bits_way_en         (_prober_io_meta_write_bits_way_en),	// @[NBDcache.scala:711:22]
    .io_in_1_bits_data_coh_state (_prober_io_meta_write_bits_data_coh_state),	// @[NBDcache.scala:711:22]
    .io_in_1_bits_data_tag       (_prober_io_meta_write_bits_data_tag),	// @[NBDcache.scala:711:22]
    .io_out_ready                (_meta_io_write_ready),	// @[NBDcache.scala:793:20]
    .io_in_0_ready               (_metaWriteArb_io_in_0_ready),
    .io_in_1_ready               (_metaWriteArb_io_in_1_ready),
    .io_out_valid                (_metaWriteArb_io_out_valid),
    .io_out_bits_idx             (_metaWriteArb_io_out_bits_idx),
    .io_out_bits_way_en          (_metaWriteArb_io_out_bits_way_en),
    .io_out_bits_data_coh_state  (_metaWriteArb_io_out_bits_data_coh_state),
    .io_out_bits_data_tag        (_metaWriteArb_io_out_bits_data_tag)
  );
  DataArray data (	// @[NBDcache.scala:800:20]
    .clock                (clock),
    .io_read_valid        (_readArb_io_out_valid),	// @[NBDcache.scala:801:23]
    .io_read_bits_way_en  (_readArb_io_out_bits_way_en),	// @[NBDcache.scala:801:23]
    .io_read_bits_addr    (_readArb_io_out_bits_addr),	// @[NBDcache.scala:801:23]
    .io_write_valid       (_writeArb_io_out_valid),	// @[NBDcache.scala:802:24]
    .io_write_bits_way_en (_writeArb_io_out_bits_way_en),	// @[NBDcache.scala:802:24]
    .io_write_bits_addr   (_writeArb_io_out_bits_addr),	// @[NBDcache.scala:802:24]
    .io_write_bits_data   (_writeArb_io_out_bits_data),	// @[NBDcache.scala:802:24]
    .io_resp_0            (_data_io_resp_0),
    .io_resp_1            (_data_io_resp_1),
    .io_resp_2            (_data_io_resp_2),
    .io_resp_3            (_data_io_resp_3)
  );
  Arbiter_9 readArb (	// @[NBDcache.scala:801:23]
    .io_in_1_valid       (_mshrs_io_replay_valid),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_addr   (_mshrs_io_replay_bits_addr[9:0]),	// @[NBDcache.scala:712:21, :914:30]
    .io_in_2_valid       (_wb_io_data_req_valid),	// @[NBDcache.scala:710:18]
    .io_in_2_bits_way_en (_wb_io_data_req_bits_way_en),	// @[NBDcache.scala:710:18]
    .io_in_2_bits_addr   (_wb_io_data_req_bits_addr),	// @[NBDcache.scala:710:18]
    .io_in_3_valid       (io_cpu_req_valid),
    .io_in_3_bits_addr   (io_cpu_req_bits_addr[9:0]),	// @[NBDcache.scala:818:30]
    .io_out_ready        (~auto_out_d_valid | tl_out_d_ready),	// @[NBDcache.scala:935:45, :946:{27,43}]
    .io_in_1_ready       (_readArb_io_in_1_ready),
    .io_in_2_ready       (_readArb_io_in_2_ready),
    .io_in_3_ready       (_readArb_io_in_3_ready),
    .io_out_valid        (_readArb_io_out_valid),
    .io_out_bits_way_en  (_readArb_io_out_bits_way_en),
    .io_out_bits_addr    (_readArb_io_out_bits_addr)
  );
  Arbiter_10 writeArb (	// @[NBDcache.scala:802:24]
    .io_in_0_valid       (s3_valid),	// @[NBDcache.scala:728:25]
    .io_in_0_bits_way_en (s3_way),	// @[NBDcache.scala:730:19]
    .io_in_0_bits_addr   (s3_req_addr[9:0]),	// @[NBDcache.scala:729:19, :890:31]
    .io_in_0_bits_data   (s3_req_data),	// @[NBDcache.scala:729:19]
    .io_in_1_valid       (auto_out_d_valid & auto_out_d_bits_opcode[0] & ~(auto_out_d_bits_source[2])),	// @[Edges.scala:106:36, NBDcache.scala:939:63, :940:53]
    .io_in_1_bits_way_en (_mshrs_io_refill_way_en),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_addr   (_mshrs_io_refill_addr),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_data   (auto_out_d_bits_data),
    .io_in_1_ready       (_writeArb_io_in_1_ready),
    .io_out_valid        (_writeArb_io_out_valid),
    .io_out_bits_way_en  (_writeArb_io_out_bits_way_en),
    .io_out_bits_addr    (_writeArb_io_out_bits_addr),
    .io_out_bits_data    (_writeArb_io_out_bits_data)
  );
  AMOALU amoalu (	// @[NBDcache.scala:883:22]
    .io_mask ({(s2_req_addr[2] ? _amoalu_io_mask_T_1 : 4'h0) | {4{&s2_req_size}}, s2_req_addr[2] ? 4'h0 : _amoalu_io_mask_T_1}),	// @[AMOALU.scala:18:{22,27,42,47,53}, :19:22, Cat.scala:33:92, NBDcache.scala:723:19]
    .io_cmd  (s2_req_cmd),	// @[NBDcache.scala:723:19]
    .io_lhs  (s2_data_word),	// @[NBDcache.scala:979:25]
    .io_rhs  (s2_req_data),	// @[NBDcache.scala:723:19]
    .io_out  (_amoalu_io_out)
  );
  MaxPeriodFibonacciLFSR lfsr_prng (	// @[PRNG.scala:91:22]
    .clock        (clock),
    .reset        (reset),
    .io_increment (_mshrs_io_req_ready & _GEN),	// @[Decoupled.scala:51:35, NBDcache.scala:712:21, :903:22, :991:{22,43}]
    .io_out_0     (_lfsr_prng_io_out_0),
    .io_out_1     (_lfsr_prng_io_out_1),
    .io_out_2     (_lfsr_prng_io_out_2),
    .io_out_3     (_lfsr_prng_io_out_3),
    .io_out_4     (_lfsr_prng_io_out_4),
    .io_out_5     (_lfsr_prng_io_out_5),
    .io_out_6     (_lfsr_prng_io_out_6),
    .io_out_7     (_lfsr_prng_io_out_7),
    .io_out_8     (_lfsr_prng_io_out_8),
    .io_out_9     (_lfsr_prng_io_out_9),
    .io_out_10    (_lfsr_prng_io_out_10),
    .io_out_11    (_lfsr_prng_io_out_11),
    .io_out_12    (_lfsr_prng_io_out_12),
    .io_out_13    (_lfsr_prng_io_out_13),
    .io_out_14    (_lfsr_prng_io_out_14),
    .io_out_15    (_lfsr_prng_io_out_15)
  );
  Arbiter_11 wbArb (	// @[NBDcache.scala:950:21]
    .io_in_0_valid         (_prober_io_wb_req_valid),	// @[NBDcache.scala:711:22]
    .io_in_0_bits_tag      (_prober_io_wb_req_bits_tag),	// @[NBDcache.scala:711:22]
    .io_in_0_bits_idx      (_prober_io_wb_req_bits_idx),	// @[NBDcache.scala:711:22]
    .io_in_0_bits_source   (_prober_io_wb_req_bits_source),	// @[NBDcache.scala:711:22]
    .io_in_0_bits_param    (_prober_io_wb_req_bits_param),	// @[NBDcache.scala:711:22]
    .io_in_0_bits_way_en   (_prober_io_wb_req_bits_way_en),	// @[NBDcache.scala:711:22]
    .io_in_1_valid         (_mshrs_io_wb_req_valid),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_tag      (_mshrs_io_wb_req_bits_tag),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_idx      (_mshrs_io_wb_req_bits_idx),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_source   (_mshrs_io_wb_req_bits_source),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_param    (_mshrs_io_wb_req_bits_param),	// @[NBDcache.scala:712:21]
    .io_in_1_bits_way_en   (_mshrs_io_wb_req_bits_way_en),	// @[NBDcache.scala:712:21]
    .io_out_ready          (_wb_io_req_ready),	// @[NBDcache.scala:710:18]
    .io_in_0_ready         (_wbArb_io_in_0_ready),
    .io_in_1_ready         (_wbArb_io_in_1_ready),
    .io_out_valid          (_wbArb_io_out_valid),
    .io_out_bits_tag       (_wbArb_io_out_bits_tag),
    .io_out_bits_idx       (_wbArb_io_out_bits_idx),
    .io_out_bits_source    (_wbArb_io_out_bits_source),
    .io_out_bits_param     (_wbArb_io_out_bits_param),
    .io_out_bits_way_en    (_wbArb_io_out_bits_way_en),
    .io_out_bits_voluntary (_wbArb_io_out_bits_voluntary)
  );
  assign auto_out_a_valid = _mshrs_io_mem_acquire_valid;	// @[NBDcache.scala:712:21]
  assign auto_out_a_bits_opcode = _mshrs_io_mem_acquire_bits_opcode;	// @[NBDcache.scala:712:21]
  assign auto_out_a_bits_size = _mshrs_io_mem_acquire_bits_size;	// @[NBDcache.scala:712:21]
  assign auto_out_a_bits_corrupt = 1'h0;
  assign auto_out_b_ready = _prober_io_req_ready & ~(|(lrsc_count[6:2]));	// @[NBDcache.scala:711:22, :844:27, :845:31, :922:44, :923:41]
  assign auto_out_c_valid = out_2_valid;	// @[Arbiter.scala:126:29]
  assign auto_out_c_bits_opcode = out_2_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_out_c_bits_param = (muxStateEarly_0 ? _wb_io_release_bits_param : 3'h0) | (muxStateEarly_1 ? _prober_io_rep_bits_param : 3'h0);	// @[Arbiter.scala:118:30, Mux.scala:27:73, NBDcache.scala:710:18, :711:22]
  assign auto_out_c_bits_size = out_2_bits_size;	// @[Mux.scala:27:73]
  assign auto_out_c_bits_source = (muxStateEarly_0 ? _wb_io_release_bits_source : 3'h0) | (muxStateEarly_1 ? _prober_io_rep_bits_source : 3'h0);	// @[Arbiter.scala:118:30, Mux.scala:27:73, NBDcache.scala:710:18, :711:22]
  assign auto_out_c_bits_address = (muxStateEarly_0 ? _wb_io_release_bits_address : 32'h0) | (muxStateEarly_1 ? _prober_io_rep_bits_address : 32'h0);	// @[Arbiter.scala:118:30, Mux.scala:27:73, NBDcache.scala:710:18, :711:22]
  assign auto_out_c_bits_data = muxStateEarly_0 ? _wb_io_release_bits_data : 64'h0;	// @[Arbiter.scala:118:30, Mux.scala:27:73, NBDcache.scala:710:18]
  assign auto_out_d_ready = tl_out_d_ready;	// @[NBDcache.scala:935:45]
  assign io_cpu_req_ready = ~_GEN_1;	// @[NBDcache.scala:714:20, :749:{54,73}, :814:{38,57}, :820:{34,53}, :1005:32, :1006:22]
  assign io_cpu_s2_nack = _io_cpu_s2_nack_output;	// @[NBDcache.scala:1032:30]
  assign io_cpu_resp_valid = mshrs_io_resp_ready_REG ? _mshrs_io_resp_valid : cache_resp_bits_replay | _cache_resp_valid_T;	// @[NBDcache.scala:712:21, :724:47, :851:25, :1010:34, :1030:33, :1033:21]
  assign io_cpu_resp_bits_addr = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_addr : s2_req_addr;	// @[NBDcache.scala:712:21, :723:19, :1030:33, :1033:21]
  assign io_cpu_resp_bits_tag = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_tag : s2_req_tag;	// @[NBDcache.scala:712:21, :723:19, :1030:33, :1033:21]
  assign io_cpu_resp_bits_cmd = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_cmd : s2_req_cmd;	// @[NBDcache.scala:712:21, :723:19, :1030:33, :1033:21]
  assign io_cpu_resp_bits_size = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_size : s2_req_size;	// @[NBDcache.scala:712:21, :723:19, :1030:33, :1033:21]
  assign io_cpu_resp_bits_signed = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_signed : s2_req_signed;	// @[NBDcache.scala:712:21, :723:19, :1030:33, :1033:21]
  assign io_cpu_resp_bits_dprv = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_dprv : 2'bz;	// @[NBDcache.scala:712:21, :1009:24, :1030:33, :1033:21]
  assign io_cpu_resp_bits_dv = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_dv : 1'bz;	// @[NBDcache.scala:712:21, :1009:24, :1030:33, :1033:21]
  assign io_cpu_resp_bits_data = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_data : {s2_req_size == 2'h0 | s2_sc ? {56{s2_req_signed & cache_resp_bits_data_zeroed_2[7]}} : {s2_req_size == 2'h1 ? {48{s2_req_signed & cache_resp_bits_data_shifted_1[15]}} : {_io_cpu_resp_bits_data_word_bypass_T_1 ? {32{s2_req_signed & cache_resp_bits_data_shifted[31]}} : s2_data_word[63:32], cache_resp_bits_data_shifted[31:16]}, cache_resp_bits_data_shifted_1[15:8]}, cache_resp_bits_data_zeroed_2[7:1], cache_resp_bits_data_zeroed_2[0] | s2_sc_fail};	// @[AMOALU.scala:40:{24,37}, :42:23, :43:{20,26,34,72,81,94}, Bitwise.scala:77:12, Cat.scala:33:92, Consts.scala:86:66, NBDcache.scala:712:21, :723:19, :849:26, :979:25, :1023:40, :1030:33, :1033:21]
  assign io_cpu_resp_bits_mask = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_mask : 8'bz;	// @[NBDcache.scala:712:21, :1009:24, :1030:33, :1033:21]
  assign io_cpu_resp_bits_replay = mshrs_io_resp_ready_REG | cache_resp_bits_replay;	// @[NBDcache.scala:724:47, :1030:33, :1033:21]
  assign io_cpu_resp_bits_has_data = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_has_data : _cache_resp_bits_has_data_T | _cache_resp_bits_has_data_T_1 | s2_lr | s2_sc | _cache_resp_bits_has_data_T_7 | _cache_resp_bits_has_data_T_8 | _cache_resp_bits_has_data_T_9 | _cache_resp_bits_has_data_T_10 | _cache_resp_bits_has_data_T_14 | _cache_resp_bits_has_data_T_15 | _cache_resp_bits_has_data_T_16 | _cache_resp_bits_has_data_T_17 | _cache_resp_bits_has_data_T_18;	// @[Consts.scala:85:68, :86:66, :87:71, NBDcache.scala:712:21, :1030:33, :1033:21, package.scala:16:47]
  assign io_cpu_resp_bits_data_word_bypass = {_io_cpu_resp_bits_data_word_bypass_T_1 ? {32{s2_req_signed & io_cpu_resp_bits_data_word_bypass_shifted[31]}} : s2_data_word[63:32], io_cpu_resp_bits_data_word_bypass_shifted};	// @[AMOALU.scala:40:{24,37}, :43:{20,26,72,81}, Bitwise.scala:77:12, Cat.scala:33:92, NBDcache.scala:723:19, :979:25]
  assign io_cpu_resp_bits_data_raw = s2_data_word;	// @[NBDcache.scala:979:25]
  assign io_cpu_resp_bits_store_data = mshrs_io_resp_ready_REG ? _mshrs_io_resp_bits_store_data : s2_req_data;	// @[NBDcache.scala:712:21, :723:19, :1030:33, :1033:21]
  assign io_cpu_replay_next = s1_replay & s1_read | _mshrs_io_replay_next;	// @[Consts.scala:85:68, NBDcache.scala:712:21, :718:26, :1037:{36,48}]
  assign io_cpu_s2_xcpt_ma_ld = _io_cpu_s2_xcpt_ma_ld_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_ma_st = _io_cpu_s2_xcpt_ma_st_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_pf_ld = _io_cpu_s2_xcpt_pf_ld_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_pf_st = _io_cpu_s2_xcpt_pf_st_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_gf_ld = _io_cpu_s2_xcpt_gf_ld_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_gf_st = _io_cpu_s2_xcpt_gf_st_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_ae_ld = _io_cpu_s2_xcpt_ae_ld_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_s2_xcpt_ae_st = _io_cpu_s2_xcpt_ae_st_output;	// @[NBDcache.scala:1041:24]
  assign io_cpu_ordered = _mshrs_io_fence_rdy & ~s1_valid & ~s2_valid;	// @[NBDcache.scala:712:21, :715:25, :722:66, :737:10, :1036:{53,56}]
  assign io_cpu_perf_acquire = (io_cpu_perf_acquire_counter == 9'h1 | (_mshrs_io_mem_acquire_bits_opcode[2] ? 9'h0 : ~(_io_cpu_perf_acquire_beats1_decode_T_1[11:3])) == 9'h0) & _io_cpu_perf_acquire_T;	// @[Decoupled.scala:51:35, Edges.scala:92:37, :221:14, :229:27, :232:{25,33,43}, :233:22, NBDcache.scala:712:21, package.scala:235:{46,71,76}]
  assign io_cpu_perf_release = (io_cpu_perf_release_counter == 9'h1 | (out_2_bits_opcode[0] ? ~(_io_cpu_perf_release_beats1_decode_T_1[11:3]) : 9'h0) == 9'h0) & _io_cpu_perf_release_T;	// @[Decoupled.scala:51:35, Edges.scala:102:36, :221:14, :229:27, :232:{25,33,43}, :233:22, Mux.scala:27:73, package.scala:235:{46,71,76}]
  assign io_cpu_perf_tlbMiss = io_ptw_req_ready & _dtlb_io_ptw_req_valid;	// @[Decoupled.scala:51:35, NBDcache.scala:739:20]
  assign io_ptw_req_valid = _dtlb_io_ptw_req_valid;	// @[NBDcache.scala:739:20]
endmodule

