// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module IOMSHR(
  input         clock,
                reset,
                io_req_valid,
  input  [39:0] io_req_bits_addr,
  input  [6:0]  io_req_bits_tag,
  input  [4:0]  io_req_bits_cmd,
  input  [1:0]  io_req_bits_size,
  input         io_req_bits_signed,
  input  [1:0]  io_req_bits_dprv,
  input         io_req_bits_dv,
  input  [63:0] io_req_bits_data,
  input  [7:0]  io_req_bits_mask,
  input         io_resp_ready,
                io_mem_access_ready,
                io_mem_ack_valid,
  input  [63:0] io_mem_ack_bits_data,
  output        io_req_ready,
                io_resp_valid,
  output [39:0] io_resp_bits_addr,
  output [6:0]  io_resp_bits_tag,
  output [4:0]  io_resp_bits_cmd,
  output [1:0]  io_resp_bits_size,
  output        io_resp_bits_signed,
  output [1:0]  io_resp_bits_dprv,
  output        io_resp_bits_dv,
  output [63:0] io_resp_bits_data,
  output [7:0]  io_resp_bits_mask,
  output        io_resp_bits_has_data,
  output [63:0] io_resp_bits_store_data,
  output        io_mem_access_valid,
  output [2:0]  io_mem_access_bits_opcode,
                io_mem_access_bits_param,
  output [3:0]  io_mem_access_bits_size,
  output [2:0]  io_mem_access_bits_source,
  output [31:0] io_mem_access_bits_address,
  output [7:0]  io_mem_access_bits_mask,
  output [63:0] io_mem_access_bits_data,
  output        io_replay_next
);

  reg  [39:0] req_addr;	// @[NBDcache.scala:68:16]
  reg  [6:0]  req_tag;	// @[NBDcache.scala:68:16]
  reg  [4:0]  req_cmd;	// @[NBDcache.scala:68:16]
  reg  [1:0]  req_size;	// @[NBDcache.scala:68:16]
  reg         req_signed;	// @[NBDcache.scala:68:16]
  reg  [1:0]  req_dprv;	// @[NBDcache.scala:68:16]
  reg         req_dv;	// @[NBDcache.scala:68:16]
  reg  [63:0] req_data;	// @[NBDcache.scala:68:16]
  reg  [7:0]  req_mask;	// @[NBDcache.scala:68:16]
  reg  [63:0] grant_word;	// @[NBDcache.scala:69:23]
  reg  [1:0]  state;	// @[NBDcache.scala:72:22]
  wire        _io_req_ready_output = state == 2'h0;	// @[NBDcache.scala:72:22, :73:26]
  wire        get_a_mask_size = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        get_a_mask_acc = (&req_size) | get_a_mask_size & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        get_a_mask_acc_1 = (&req_size) | get_a_mask_size & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        get_a_mask_size_1 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        get_a_mask_eq_2 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        get_a_mask_acc_2 = get_a_mask_acc | get_a_mask_size_1 & get_a_mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        get_a_mask_eq_3 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        get_a_mask_acc_3 = get_a_mask_acc | get_a_mask_size_1 & get_a_mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        get_a_mask_eq_4 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        get_a_mask_acc_4 = get_a_mask_acc_1 | get_a_mask_size_1 & get_a_mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        get_a_mask_eq_5 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        get_a_mask_acc_5 = get_a_mask_acc_1 | get_a_mask_size_1 & get_a_mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        put_a_mask_size = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        put_a_mask_acc = (&req_size) | put_a_mask_size & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        put_a_mask_acc_1 = (&req_size) | put_a_mask_size & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        put_a_mask_size_1 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        put_a_mask_eq_2 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        put_a_mask_acc_2 = put_a_mask_acc | put_a_mask_size_1 & put_a_mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        put_a_mask_eq_3 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        put_a_mask_acc_3 = put_a_mask_acc | put_a_mask_size_1 & put_a_mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        put_a_mask_eq_4 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        put_a_mask_acc_4 = put_a_mask_acc_1 | put_a_mask_size_1 & put_a_mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        put_a_mask_eq_5 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        put_a_mask_acc_5 = put_a_mask_acc_1 | put_a_mask_size_1 & put_a_mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc = (&req_size) | atomics_a_mask_size & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_1 = (&req_size) | atomics_a_mask_size & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_1 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_2 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_2 = atomics_a_mask_acc | atomics_a_mask_size_1 & atomics_a_mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_3 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_3 = atomics_a_mask_acc | atomics_a_mask_size_1 & atomics_a_mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_4 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_4 = atomics_a_mask_acc_1 | atomics_a_mask_size_1 & atomics_a_mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_5 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_5 = atomics_a_mask_acc_1 | atomics_a_mask_size_1 & atomics_a_mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_3 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_14 = (&req_size) | atomics_a_mask_size_3 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_15 = (&req_size) | atomics_a_mask_size_3 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_4 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_16 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_16 = atomics_a_mask_acc_14 | atomics_a_mask_size_4 & atomics_a_mask_eq_16;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_17 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_17 = atomics_a_mask_acc_14 | atomics_a_mask_size_4 & atomics_a_mask_eq_17;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_18 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_18 = atomics_a_mask_acc_15 | atomics_a_mask_size_4 & atomics_a_mask_eq_18;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_19 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_19 = atomics_a_mask_acc_15 | atomics_a_mask_size_4 & atomics_a_mask_eq_19;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_6 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_28 = (&req_size) | atomics_a_mask_size_6 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_29 = (&req_size) | atomics_a_mask_size_6 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_7 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_30 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_30 = atomics_a_mask_acc_28 | atomics_a_mask_size_7 & atomics_a_mask_eq_30;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_31 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_31 = atomics_a_mask_acc_28 | atomics_a_mask_size_7 & atomics_a_mask_eq_31;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_32 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_32 = atomics_a_mask_acc_29 | atomics_a_mask_size_7 & atomics_a_mask_eq_32;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_33 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_33 = atomics_a_mask_acc_29 | atomics_a_mask_size_7 & atomics_a_mask_eq_33;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_9 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_42 = (&req_size) | atomics_a_mask_size_9 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_43 = (&req_size) | atomics_a_mask_size_9 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_10 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_44 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_44 = atomics_a_mask_acc_42 | atomics_a_mask_size_10 & atomics_a_mask_eq_44;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_45 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_45 = atomics_a_mask_acc_42 | atomics_a_mask_size_10 & atomics_a_mask_eq_45;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_46 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_46 = atomics_a_mask_acc_43 | atomics_a_mask_size_10 & atomics_a_mask_eq_46;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_47 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_47 = atomics_a_mask_acc_43 | atomics_a_mask_size_10 & atomics_a_mask_eq_47;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_12 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_56 = (&req_size) | atomics_a_mask_size_12 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_57 = (&req_size) | atomics_a_mask_size_12 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_13 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_58 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_58 = atomics_a_mask_acc_56 | atomics_a_mask_size_13 & atomics_a_mask_eq_58;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_59 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_59 = atomics_a_mask_acc_56 | atomics_a_mask_size_13 & atomics_a_mask_eq_59;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_60 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_60 = atomics_a_mask_acc_57 | atomics_a_mask_size_13 & atomics_a_mask_eq_60;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_61 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_61 = atomics_a_mask_acc_57 | atomics_a_mask_size_13 & atomics_a_mask_eq_61;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_15 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_70 = (&req_size) | atomics_a_mask_size_15 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_71 = (&req_size) | atomics_a_mask_size_15 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_16 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_72 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_72 = atomics_a_mask_acc_70 | atomics_a_mask_size_16 & atomics_a_mask_eq_72;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_73 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_73 = atomics_a_mask_acc_70 | atomics_a_mask_size_16 & atomics_a_mask_eq_73;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_74 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_74 = atomics_a_mask_acc_71 | atomics_a_mask_size_16 & atomics_a_mask_eq_74;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_75 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_75 = atomics_a_mask_acc_71 | atomics_a_mask_size_16 & atomics_a_mask_eq_75;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_18 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_84 = (&req_size) | atomics_a_mask_size_18 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_85 = (&req_size) | atomics_a_mask_size_18 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_19 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_86 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_86 = atomics_a_mask_acc_84 | atomics_a_mask_size_19 & atomics_a_mask_eq_86;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_87 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_87 = atomics_a_mask_acc_84 | atomics_a_mask_size_19 & atomics_a_mask_eq_87;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_88 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_88 = atomics_a_mask_acc_85 | atomics_a_mask_size_19 & atomics_a_mask_eq_88;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_89 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_89 = atomics_a_mask_acc_85 | atomics_a_mask_size_19 & atomics_a_mask_eq_89;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_21 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_98 = (&req_size) | atomics_a_mask_size_21 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_99 = (&req_size) | atomics_a_mask_size_21 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_22 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_100 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_100 = atomics_a_mask_acc_98 | atomics_a_mask_size_22 & atomics_a_mask_eq_100;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_101 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_101 = atomics_a_mask_acc_98 | atomics_a_mask_size_22 & atomics_a_mask_eq_101;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_102 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_102 = atomics_a_mask_acc_99 | atomics_a_mask_size_22 & atomics_a_mask_eq_102;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_103 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_103 = atomics_a_mask_acc_99 | atomics_a_mask_size_22 & atomics_a_mask_eq_103;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_size_24 = req_size == 2'h2;	// @[Edges.scala:509:15, Misc.scala:208:26, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_112 = (&req_size) | atomics_a_mask_size_24 & ~(req_addr[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_113 = (&req_size) | atomics_a_mask_size_24 & req_addr[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}, NBDcache.scala:68:16]
  wire        atomics_a_mask_size_25 = req_size == 2'h1;	// @[Misc.scala:208:26, NBDcache.scala:68:16, :102:33]
  wire        atomics_a_mask_eq_114 = ~(req_addr[2]) & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_114 = atomics_a_mask_acc_112 | atomics_a_mask_size_25 & atomics_a_mask_eq_114;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_115 = ~(req_addr[2]) & req_addr[1];	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_115 = atomics_a_mask_acc_112 | atomics_a_mask_size_25 & atomics_a_mask_eq_115;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_116 = req_addr[2] & ~(req_addr[1]);	// @[Misc.scala:209:26, :210:20, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_116 = atomics_a_mask_acc_113 | atomics_a_mask_size_25 & atomics_a_mask_eq_116;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        atomics_a_mask_eq_117 = req_addr[2] & req_addr[1];	// @[Misc.scala:209:26, :213:27, NBDcache.scala:68:16]
  wire        atomics_a_mask_acc_117 = atomics_a_mask_acc_113 | atomics_a_mask_size_25 & atomics_a_mask_eq_117;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
  wire        _T_17 = req_cmd == 5'h4;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_18 = req_cmd == 5'h9;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_19 = req_cmd == 5'hA;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_20 = req_cmd == 5'hB;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _GEN = _T_20 | _T_19 | _T_18 | _T_17;	// @[Mux.scala:81:{58,61}]
  wire        _T_24 = req_cmd == 5'h8;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_25 = req_cmd == 5'hC;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_26 = req_cmd == 5'hD;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_27 = req_cmd == 5'hE;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire        _T_28 = req_cmd == 5'hF;	// @[Mux.scala:81:61, NBDcache.scala:68:16]
  wire [7:0]  atomics_mask =
    _T_28
      ? {atomics_a_mask_acc_117 | atomics_a_mask_eq_117 & req_addr[0], atomics_a_mask_acc_117 | atomics_a_mask_eq_117 & ~(req_addr[0]), atomics_a_mask_acc_116 | atomics_a_mask_eq_116 & req_addr[0], atomics_a_mask_acc_116 | atomics_a_mask_eq_116 & ~(req_addr[0]), atomics_a_mask_acc_115 | atomics_a_mask_eq_115 & req_addr[0], atomics_a_mask_acc_115 | atomics_a_mask_eq_115 & ~(req_addr[0]), atomics_a_mask_acc_114 | atomics_a_mask_eq_114 & req_addr[0], atomics_a_mask_acc_114 | atomics_a_mask_eq_114 & ~(req_addr[0])}
      : _T_27
          ? {atomics_a_mask_acc_103 | atomics_a_mask_eq_103 & req_addr[0], atomics_a_mask_acc_103 | atomics_a_mask_eq_103 & ~(req_addr[0]), atomics_a_mask_acc_102 | atomics_a_mask_eq_102 & req_addr[0], atomics_a_mask_acc_102 | atomics_a_mask_eq_102 & ~(req_addr[0]), atomics_a_mask_acc_101 | atomics_a_mask_eq_101 & req_addr[0], atomics_a_mask_acc_101 | atomics_a_mask_eq_101 & ~(req_addr[0]), atomics_a_mask_acc_100 | atomics_a_mask_eq_100 & req_addr[0], atomics_a_mask_acc_100 | atomics_a_mask_eq_100 & ~(req_addr[0])}
          : _T_26
              ? {atomics_a_mask_acc_89 | atomics_a_mask_eq_89 & req_addr[0], atomics_a_mask_acc_89 | atomics_a_mask_eq_89 & ~(req_addr[0]), atomics_a_mask_acc_88 | atomics_a_mask_eq_88 & req_addr[0], atomics_a_mask_acc_88 | atomics_a_mask_eq_88 & ~(req_addr[0]), atomics_a_mask_acc_87 | atomics_a_mask_eq_87 & req_addr[0], atomics_a_mask_acc_87 | atomics_a_mask_eq_87 & ~(req_addr[0]), atomics_a_mask_acc_86 | atomics_a_mask_eq_86 & req_addr[0], atomics_a_mask_acc_86 | atomics_a_mask_eq_86 & ~(req_addr[0])}
              : _T_25
                  ? {atomics_a_mask_acc_75 | atomics_a_mask_eq_75 & req_addr[0], atomics_a_mask_acc_75 | atomics_a_mask_eq_75 & ~(req_addr[0]), atomics_a_mask_acc_74 | atomics_a_mask_eq_74 & req_addr[0], atomics_a_mask_acc_74 | atomics_a_mask_eq_74 & ~(req_addr[0]), atomics_a_mask_acc_73 | atomics_a_mask_eq_73 & req_addr[0], atomics_a_mask_acc_73 | atomics_a_mask_eq_73 & ~(req_addr[0]), atomics_a_mask_acc_72 | atomics_a_mask_eq_72 & req_addr[0], atomics_a_mask_acc_72 | atomics_a_mask_eq_72 & ~(req_addr[0])}
                  : _T_24
                      ? {atomics_a_mask_acc_61 | atomics_a_mask_eq_61 & req_addr[0], atomics_a_mask_acc_61 | atomics_a_mask_eq_61 & ~(req_addr[0]), atomics_a_mask_acc_60 | atomics_a_mask_eq_60 & req_addr[0], atomics_a_mask_acc_60 | atomics_a_mask_eq_60 & ~(req_addr[0]), atomics_a_mask_acc_59 | atomics_a_mask_eq_59 & req_addr[0], atomics_a_mask_acc_59 | atomics_a_mask_eq_59 & ~(req_addr[0]), atomics_a_mask_acc_58 | atomics_a_mask_eq_58 & req_addr[0], atomics_a_mask_acc_58 | atomics_a_mask_eq_58 & ~(req_addr[0])}
                      : _T_20 ? {atomics_a_mask_acc_47 | atomics_a_mask_eq_47 & req_addr[0], atomics_a_mask_acc_47 | atomics_a_mask_eq_47 & ~(req_addr[0]), atomics_a_mask_acc_46 | atomics_a_mask_eq_46 & req_addr[0], atomics_a_mask_acc_46 | atomics_a_mask_eq_46 & ~(req_addr[0]), atomics_a_mask_acc_45 | atomics_a_mask_eq_45 & req_addr[0], atomics_a_mask_acc_45 | atomics_a_mask_eq_45 & ~(req_addr[0]), atomics_a_mask_acc_44 | atomics_a_mask_eq_44 & req_addr[0], atomics_a_mask_acc_44 | atomics_a_mask_eq_44 & ~(req_addr[0])} : _T_19 ? {atomics_a_mask_acc_33 | atomics_a_mask_eq_33 & req_addr[0], atomics_a_mask_acc_33 | atomics_a_mask_eq_33 & ~(req_addr[0]), atomics_a_mask_acc_32 | atomics_a_mask_eq_32 & req_addr[0], atomics_a_mask_acc_32 | atomics_a_mask_eq_32 & ~(req_addr[0]), atomics_a_mask_acc_31 | atomics_a_mask_eq_31 & req_addr[0], atomics_a_mask_acc_31 | atomics_a_mask_eq_31 & ~(req_addr[0]), atomics_a_mask_acc_30 | atomics_a_mask_eq_30 & req_addr[0], atomics_a_mask_acc_30 | atomics_a_mask_eq_30 & ~(req_addr[0])} : _T_18 ? {atomics_a_mask_acc_19 | atomics_a_mask_eq_19 & req_addr[0], atomics_a_mask_acc_19 | atomics_a_mask_eq_19 & ~(req_addr[0]), atomics_a_mask_acc_18 | atomics_a_mask_eq_18 & req_addr[0], atomics_a_mask_acc_18 | atomics_a_mask_eq_18 & ~(req_addr[0]), atomics_a_mask_acc_17 | atomics_a_mask_eq_17 & req_addr[0], atomics_a_mask_acc_17 | atomics_a_mask_eq_17 & ~(req_addr[0]), atomics_a_mask_acc_16 | atomics_a_mask_eq_16 & req_addr[0], atomics_a_mask_acc_16 | atomics_a_mask_eq_16 & ~(req_addr[0])} : _T_17 ? {atomics_a_mask_acc_5 | atomics_a_mask_eq_5 & req_addr[0], atomics_a_mask_acc_5 | atomics_a_mask_eq_5 & ~(req_addr[0]), atomics_a_mask_acc_4 | atomics_a_mask_eq_4 & req_addr[0], atomics_a_mask_acc_4 | atomics_a_mask_eq_4 & ~(req_addr[0]), atomics_a_mask_acc_3 | atomics_a_mask_eq_3 & req_addr[0], atomics_a_mask_acc_3 | atomics_a_mask_eq_3 & ~(req_addr[0]), atomics_a_mask_acc_2 | atomics_a_mask_eq_2 & req_addr[0], atomics_a_mask_acc_2 | atomics_a_mask_eq_2 & ~(req_addr[0])} : 8'h0;	// @[Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29, Mux.scala:81:{58,61}, NBDcache.scala:68:16, :85:38]
  wire        _io_mem_access_valid_output = state == 2'h1;	// @[NBDcache.scala:72:22, :102:33]
  wire        _io_mem_access_bits_T_16 = _T_17 | _T_18 | _T_19 | _T_20 | _T_24 | _T_25 | _T_26 | _T_27 | _T_28;	// @[Consts.scala:83:44, Mux.scala:81:61]
  wire        _T_10 = req_cmd == 5'h0;	// @[NBDcache.scala:68:16, package.scala:16:47]
  wire        _T_11 = req_cmd == 5'h10;	// @[NBDcache.scala:68:16, package.scala:16:47]
  wire        _T_12 = req_cmd == 5'h6;	// @[NBDcache.scala:68:16, package.scala:16:47]
  wire        _T_13 = req_cmd == 5'h7;	// @[NBDcache.scala:68:16, :100:38, package.scala:16:47]
  wire        _io_mem_access_bits_T_41 = _T_10 | _T_11 | _T_12 | _T_13 | _T_17 | _T_18 | _T_19 | _T_20 | _T_24 | _T_25 | _T_26 | _T_27 | _T_28;	// @[Consts.scala:85:68, Mux.scala:81:61, package.scala:16:47]
  wire        _GEN_0 = ~_io_mem_access_bits_T_16 | _T_28 | _T_27 | _T_26 | _T_25 | _T_24 | _T_20 | _T_19 | _T_18 | _T_17;	// @[Consts.scala:83:44, Mux.scala:81:61, NBDcache.scala:103:28]
  wire        _T_8 = state == 2'h2;	// @[Edges.scala:509:15, NBDcache.scala:72:22, :105:28]
  wire [31:0] io_resp_bits_data_shifted = req_addr[2] ? grant_word[63:32] : grant_word[31:0];	// @[AMOALU.scala:40:{24,37,55}, Misc.scala:209:26, NBDcache.scala:68:16, :69:23]
  wire [15:0] io_resp_bits_data_shifted_1 = req_addr[1] ? io_resp_bits_data_shifted[31:16] : io_resp_bits_data_shifted[15:0];	// @[AMOALU.scala:40:{24,37,55}, Misc.scala:209:26, NBDcache.scala:68:16]
  wire [7:0]  io_resp_bits_data_shifted_2 = req_addr[0] ? io_resp_bits_data_shifted_1[15:8] : io_resp_bits_data_shifted_1[7:0];	// @[AMOALU.scala:40:{24,37,55}, Misc.scala:209:26, NBDcache.scala:68:16]
  wire        _T_6 = _io_req_ready_output & io_req_valid;	// @[Decoupled.scala:51:35, NBDcache.scala:73:26]
  wire        _T_9 = _T_8 & io_mem_ack_valid;	// @[NBDcache.scala:105:28, :132:29]
  always @(posedge clock) begin
    if (_T_6) begin	// @[Decoupled.scala:51:35]
      req_addr <= io_req_bits_addr;	// @[NBDcache.scala:68:16]
      req_tag <= io_req_bits_tag;	// @[NBDcache.scala:68:16]
      req_cmd <= io_req_bits_cmd;	// @[NBDcache.scala:68:16]
      req_size <= io_req_bits_size;	// @[NBDcache.scala:68:16]
      req_signed <= io_req_bits_signed;	// @[NBDcache.scala:68:16]
      req_dprv <= io_req_bits_dprv;	// @[NBDcache.scala:68:16]
      req_dv <= io_req_bits_dv;	// @[NBDcache.scala:68:16]
      req_data <= io_req_bits_data;	// @[NBDcache.scala:68:16]
      req_mask <= io_req_bits_mask;	// @[NBDcache.scala:68:16]
    end
    if (_T_9 & (_T_10 | _T_11 | _T_12 | _T_13 | _T_17 | _T_18 | _T_19 | _T_20 | _T_24 | _T_25 | _T_26 | _T_27 | _T_28))	// @[Consts.scala:85:68, Mux.scala:81:61, NBDcache.scala:69:23, :132:{29,50}, :134:28, :135:18, package.scala:16:47]
      grant_word <= io_mem_ack_bits_data;	// @[NBDcache.scala:69:23]
    if (reset)
      state <= 2'h0;	// @[NBDcache.scala:72:22]
    else if (io_resp_ready & (&state))	// @[Decoupled.scala:51:35, NBDcache.scala:72:22, :106:27]
      state <= 2'h0;	// @[NBDcache.scala:72:22]
    else if (_T_9)	// @[NBDcache.scala:132:29]
      state <= 2'h3;	// @[Misc.scala:205:21, NBDcache.scala:72:22]
    else if (io_mem_access_ready & _io_mem_access_valid_output)	// @[Decoupled.scala:51:35, NBDcache.scala:102:33]
      state <= 2'h2;	// @[Edges.scala:509:15, NBDcache.scala:72:22]
    else if (_T_6)	// @[Decoupled.scala:51:35]
      state <= 2'h1;	// @[NBDcache.scala:72:22, :102:33]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[NBDcache.scala:100:9]
      if (~reset & ~(_io_req_ready_output | req_cmd != 5'h7)) begin	// @[NBDcache.scala:68:16, :73:26, :100:{9,27,38}]
        if (`ASSERT_VERBOSE_COND_)	// @[NBDcache.scala:100:9]
          $error("Assertion failed\n    at NBDcache.scala:100 assert(state === s_idle || req.cmd =/= M_XSC)\n");	// @[NBDcache.scala:100:9]
        if (`STOP_COND_)	// @[NBDcache.scala:100:9]
          $fatal;	// @[NBDcache.scala:100:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        req_addr = {_RANDOM_0, _RANDOM_1[7:0]};	// @[NBDcache.scala:68:16]
        req_tag = _RANDOM_1[14:8];	// @[NBDcache.scala:68:16]
        req_cmd = _RANDOM_1[19:15];	// @[NBDcache.scala:68:16]
        req_size = _RANDOM_1[21:20];	// @[NBDcache.scala:68:16]
        req_signed = _RANDOM_1[22];	// @[NBDcache.scala:68:16]
        req_dprv = _RANDOM_1[24:23];	// @[NBDcache.scala:68:16]
        req_dv = _RANDOM_1[25];	// @[NBDcache.scala:68:16]
        req_data = {_RANDOM_1[31:29], _RANDOM_2, _RANDOM_3[28:0]};	// @[NBDcache.scala:68:16]
        req_mask = {_RANDOM_3[31:29], _RANDOM_4[4:0]};	// @[NBDcache.scala:68:16]
        grant_word = {_RANDOM_4[31:5], _RANDOM_5, _RANDOM_6[4:0]};	// @[NBDcache.scala:68:16, :69:23]
        state = _RANDOM_6[6:5];	// @[NBDcache.scala:69:23, :72:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = _io_req_ready_output;	// @[NBDcache.scala:73:26]
  assign io_resp_valid = &state;	// @[NBDcache.scala:72:22, :106:27]
  assign io_resp_bits_addr = req_addr;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_tag = req_tag;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_cmd = req_cmd;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_size = req_size;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_signed = req_signed;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_dprv = req_dprv;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_dv = req_dv;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_data = {req_size == 2'h0 ? {56{req_signed & io_resp_bits_data_shifted_2[7]}} : {req_size == 2'h1 ? {48{req_signed & io_resp_bits_data_shifted_1[15]}} : {req_size == 2'h2 ? {32{req_signed & io_resp_bits_data_shifted[31]}} : grant_word[63:32], io_resp_bits_data_shifted[31:16]}, io_resp_bits_data_shifted_1[15:8]}, io_resp_bits_data_shifted_2};	// @[AMOALU.scala:40:{24,37}, :43:{20,26,72,81,94}, Bitwise.scala:77:12, Cat.scala:33:92, Edges.scala:509:15, NBDcache.scala:68:16, :69:23, :72:22, :102:33]
  assign io_resp_bits_mask = req_mask;	// @[NBDcache.scala:68:16]
  assign io_resp_bits_has_data = _T_10 | _T_11 | _T_12 | _T_13 | _T_17 | _T_18 | _T_19 | _T_20 | _T_24 | _T_25 | _T_26 | _T_27 | _T_28;	// @[Consts.scala:85:68, Mux.scala:81:61, package.scala:16:47]
  assign io_resp_bits_store_data = req_data;	// @[NBDcache.scala:68:16]
  assign io_mem_access_valid = _io_mem_access_valid_output;	// @[NBDcache.scala:102:33]
  assign io_mem_access_bits_opcode = _io_mem_access_bits_T_16 ? (_T_28 | _T_27 | _T_26 | _T_25 | _T_24 ? 3'h2 : _GEN ? 3'h3 : 3'h0) : {_io_mem_access_bits_T_41, 2'h0};	// @[Consts.scala:83:44, :85:68, Edges.scala:526:15, Misc.scala:201:34, Mux.scala:81:{58,61}, NBDcache.scala:72:22, :103:{28,57}]
  assign io_mem_access_bits_param = _io_mem_access_bits_T_16 ? (_T_28 ? 3'h3 : _T_27 ? 3'h2 : _T_26 ? 3'h1 : _T_25 ? 3'h0 : _T_24 ? 3'h4 : _T_20 ? 3'h2 : _T_19 ? 3'h1 : _T_18 | ~_T_17 ? 3'h0 : 3'h3) : 3'h0;	// @[Consts.scala:83:44, Edges.scala:455:15, :526:15, Misc.scala:201:34, Mux.scala:81:{58,61}, NBDcache.scala:103:28]
  assign io_mem_access_bits_size = _GEN_0 ? {2'h0, req_size} : 4'h0;	// @[Edges.scala:457:15, NBDcache.scala:68:16, :72:22, :85:38, :103:28]
  assign io_mem_access_bits_source = _io_mem_access_bits_T_16 ? {_T_28 | _T_27 | _T_26 | _T_25 | _T_24 | _GEN, 2'h0} : 3'h4;	// @[Consts.scala:83:44, Edges.scala:455:15, Mux.scala:81:{58,61}, NBDcache.scala:72:22, :103:28]
  assign io_mem_access_bits_address = _GEN_0 ? req_addr[31:0] : 32'h0;	// @[Edges.scala:459:15, NBDcache.scala:68:16, :85:38, :103:28]
  assign io_mem_access_bits_mask = _io_mem_access_bits_T_16 ? atomics_mask : _io_mem_access_bits_T_41 ? {get_a_mask_acc_5 | get_a_mask_eq_5 & req_addr[0], get_a_mask_acc_5 | get_a_mask_eq_5 & ~(req_addr[0]), get_a_mask_acc_4 | get_a_mask_eq_4 & req_addr[0], get_a_mask_acc_4 | get_a_mask_eq_4 & ~(req_addr[0]), get_a_mask_acc_3 | get_a_mask_eq_3 & req_addr[0], get_a_mask_acc_3 | get_a_mask_eq_3 & ~(req_addr[0]), get_a_mask_acc_2 | get_a_mask_eq_2 & req_addr[0], get_a_mask_acc_2 | get_a_mask_eq_2 & ~(req_addr[0])} : {put_a_mask_acc_5 | put_a_mask_eq_5 & req_addr[0], put_a_mask_acc_5 | put_a_mask_eq_5 & ~(req_addr[0]), put_a_mask_acc_4 | put_a_mask_eq_4 & req_addr[0], put_a_mask_acc_4 | put_a_mask_eq_4 & ~(req_addr[0]), put_a_mask_acc_3 | put_a_mask_eq_3 & req_addr[0], put_a_mask_acc_3 | put_a_mask_eq_3 & ~(req_addr[0]), put_a_mask_acc_2 | put_a_mask_eq_2 & req_addr[0], put_a_mask_acc_2 | put_a_mask_eq_2 & ~(req_addr[0])};	// @[Cat.scala:33:92, Consts.scala:83:44, :85:68, Misc.scala:209:26, :210:20, :213:27, :214:29, Mux.scala:81:58, NBDcache.scala:68:16, :103:{28,57}]
  assign io_mem_access_bits_data = _io_mem_access_bits_T_16 ? (_T_28 | _T_27 | _T_26 | _T_25 | _T_24 | _T_20 | _T_19 | _T_18 | _T_17 ? req_data : 64'h0) : _io_mem_access_bits_T_41 ? 64'h0 : req_data;	// @[Consts.scala:83:44, :85:68, Mux.scala:81:{58,61}, NBDcache.scala:68:16, :85:38, :103:{28,57}]
  assign io_replay_next = _T_8 | (&state) & ~io_resp_ready;	// @[NBDcache.scala:72:22, :105:{28,43,60,63}, :106:27]
endmodule

