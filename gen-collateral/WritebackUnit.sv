// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module WritebackUnit(
  input         clock,
                reset,
                io_req_valid,
  input  [21:0] io_req_bits_tag,
  input  [3:0]  io_req_bits_idx,
  input  [2:0]  io_req_bits_source,
                io_req_bits_param,
  input  [3:0]  io_req_bits_way_en,
  input         io_req_bits_voluntary,
                io_meta_read_ready,
                io_data_req_ready,
  input  [63:0] io_data_resp,
  input         io_release_ready,
  output        io_req_ready,
                io_meta_read_valid,
  output [3:0]  io_meta_read_bits_idx,
  output [21:0] io_meta_read_bits_tag,
  output        io_data_req_valid,
  output [3:0]  io_data_req_bits_way_en,
  output [9:0]  io_data_req_bits_addr,
  output        io_release_valid,
  output [2:0]  io_release_bits_opcode,
                io_release_bits_param,
                io_release_bits_source,
  output [31:0] io_release_bits_address,
  output [63:0] io_release_bits_data
);

  reg  [21:0] req_tag;	// @[NBDcache.scala:469:16]
  reg  [3:0]  req_idx;	// @[NBDcache.scala:469:16]
  reg  [2:0]  req_source;	// @[NBDcache.scala:469:16]
  reg  [2:0]  req_param;	// @[NBDcache.scala:469:16]
  reg  [3:0]  req_way_en;	// @[NBDcache.scala:469:16]
  reg         req_voluntary;	// @[NBDcache.scala:469:16]
  reg         active;	// @[NBDcache.scala:470:23]
  reg         r1_data_req_fired;	// @[NBDcache.scala:471:34]
  reg         r2_data_req_fired;	// @[NBDcache.scala:472:34]
  reg  [3:0]  data_req_cnt;	// @[NBDcache.scala:473:29]
  wire        _io_data_req_valid_output = active & ~(data_req_cnt[3]);	// @[NBDcache.scala:470:23, :473:29, :493:32, :505:{21,37}]
  wire        _T_3 = io_data_req_ready & _io_data_req_valid_output & io_meta_read_ready;	// @[NBDcache.scala:480:28, :505:21]
  wire        _GEN = r2_data_req_fired & ~io_release_ready;	// @[NBDcache.scala:472:34, :480:50, :484:30, :486:{12,31}, :487:27]
  wire        _T_6 = ~active & io_req_valid;	// @[Decoupled.scala:51:35, NBDcache.scala:470:23, :503:19]
  always @(posedge clock) begin
    if (_T_6) begin	// @[Decoupled.scala:51:35]
      req_tag <= io_req_bits_tag;	// @[NBDcache.scala:469:16]
      req_idx <= io_req_bits_idx;	// @[NBDcache.scala:469:16]
      req_source <= io_req_bits_source;	// @[NBDcache.scala:469:16]
      req_param <= io_req_bits_param;	// @[NBDcache.scala:469:16]
      req_way_en <= io_req_bits_way_en;	// @[NBDcache.scala:469:16]
      req_voluntary <= io_req_bits_voluntary;	// @[NBDcache.scala:469:16]
    end
    if (reset) begin
      active <= 1'h0;	// @[NBDcache.scala:469:16, :470:23]
      r1_data_req_fired <= 1'h0;	// @[NBDcache.scala:469:16, :471:34]
      r2_data_req_fired <= 1'h0;	// @[NBDcache.scala:469:16, :472:34]
      data_req_cnt <= 4'h0;	// @[NBDcache.scala:473:29]
    end
    else begin
      active <= _T_6 | (active & r2_data_req_fired & ~r1_data_req_fired ? ~(data_req_cnt[3]) | ~io_release_ready : active);	// @[Decoupled.scala:51:35, NBDcache.scala:470:23, :471:34, :472:34, :473:29, :477:17, :484:30, :486:12, :491:{12,32}, :493:{16,32,49}, :497:22, :498:12]
      if (active) begin	// @[NBDcache.scala:470:23]
        r1_data_req_fired <= ~_GEN & _T_3;	// @[NBDcache.scala:471:34, :480:{28,50}, :484:30, :486:31, :487:27]
        r2_data_req_fired <= ~_GEN & r1_data_req_fired;	// @[NBDcache.scala:471:34, :472:34, :479:23, :480:50, :484:30, :486:31, :487:27, :488:27]
      end
      if (_T_6)	// @[Decoupled.scala:51:35]
        data_req_cnt <= 4'h0;	// @[NBDcache.scala:473:29]
      else if (active) begin	// @[NBDcache.scala:470:23]
        if (_GEN)	// @[NBDcache.scala:480:50, :484:30, :486:31, :487:27]
          data_req_cnt <= data_req_cnt - {2'h0, r1_data_req_fired ? 2'h2 : 2'h1};	// @[NBDcache.scala:471:34, :473:29, :489:{38,49}]
        else if (_T_3)	// @[NBDcache.scala:480:28]
          data_req_cnt <= data_req_cnt + 4'h1;	// @[NBDcache.scala:473:29, :482:36]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        req_tag = _RANDOM_0[21:0];	// @[NBDcache.scala:469:16]
        req_idx = _RANDOM_0[25:22];	// @[NBDcache.scala:469:16]
        req_source = _RANDOM_0[28:26];	// @[NBDcache.scala:469:16]
        req_param = _RANDOM_0[31:29];	// @[NBDcache.scala:469:16]
        req_way_en = _RANDOM_1[3:0];	// @[NBDcache.scala:469:16]
        req_voluntary = _RANDOM_1[4];	// @[NBDcache.scala:469:16]
        active = _RANDOM_1[5];	// @[NBDcache.scala:469:16, :470:23]
        r1_data_req_fired = _RANDOM_1[6];	// @[NBDcache.scala:469:16, :471:34]
        r2_data_req_fired = _RANDOM_1[7];	// @[NBDcache.scala:469:16, :472:34]
        data_req_cnt = _RANDOM_1[11:8];	// @[NBDcache.scala:469:16, :473:29]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = ~active;	// @[NBDcache.scala:470:23, :503:19]
  assign io_meta_read_valid = _io_data_req_valid_output;	// @[NBDcache.scala:505:21]
  assign io_meta_read_bits_idx = req_idx;	// @[NBDcache.scala:469:16]
  assign io_meta_read_bits_tag = req_tag;	// @[NBDcache.scala:469:16]
  assign io_data_req_valid = _io_data_req_valid_output;	// @[NBDcache.scala:505:21]
  assign io_data_req_bits_way_en = req_way_en;	// @[NBDcache.scala:469:16]
  assign io_data_req_bits_addr = {req_idx, data_req_cnt[2:0], 3'h0};	// @[NBDcache.scala:469:16, :473:29, :489:38, :516:56, :517:43]
  assign io_release_valid = active & r2_data_req_fired;	// @[NBDcache.scala:470:23, :472:34, :476:20, :477:17, :484:30]
  assign io_release_bits_opcode = {1'h1, req_voluntary, 1'h1};	// @[Edges.scala:230:28, NBDcache.scala:469:16, :534:25]
  assign io_release_bits_param = req_param;	// @[NBDcache.scala:469:16]
  assign io_release_bits_source = req_source;	// @[NBDcache.scala:469:16]
  assign io_release_bits_address = {req_tag, req_idx, 6'h0};	// @[NBDcache.scala:469:16, :519:41]
  assign io_release_bits_data = io_data_resp;
endmodule

